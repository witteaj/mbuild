5c5
<    "execution_count": 1,
---
>    "execution_count": null,
160c160
<     "        self.past_lat_vecs.append(deepcopy(lattice_vectors))\n",
---
>     "        self.past_lat_vecs.append(lattice_vectors)\n",
162,163d161
<     "        self.been_mirrored = [1, deque(), deque(), deque(), deque(), True]\n",
<     "        # the first two deques are for undo the last 2 are for redo\n",
531d528
<     "        ret_lattice.made_from_lattice = True \n",
610d606
<     "        # check enantiomeric compatability\n",
615d610
<     "            # consider expanding to tuples, probably not arrays\n",
630c625
<     "        updated_lat_vecs = list(deepcopy(self.lattice_vectors))\n",
---
>     "        updated_lat_vecs = [kk for kk in self.lattice_vectors]\n",
667c662
<     "                #now we write the code to rotate that mans.\n",
---
>     "                #now we write the code to rotate that hoe.\n",
686,690c681
<     "        \n",
<     "        if self.been_mirrored[5]:\n",
<     "            self.been_mirrored[3].clear()\n",
<     "            self.been_mirrored[4].clear()\n",
<     "            self.redo_lat_vecs.clear()\n",
---
>     "        self.redo_lat_vecs.clear()\n",
711,715c702,703
<     "            for ii in new_view: \n",
<     "                if not isinstance(ii, (float, int)):\n",
<     "                    raise TypeError('For the by_angles option, the user must pass in '\n",
<     "                                   'a list of either integers or floats. User passed '\n",
<     "                                   'type {}.'.format(type(ii)))\n",
---
>     "            elif True: # type check new_view\n",
>     "                pass\n",
726,761d713
<     "        elif axis_align:\n",
<     "            if True: # test to ensure not over defined\n",
<     "                pass\n",
<     "            if len(new_view) != 2:\n",
<     "                raise ValueError('')\n",
<     "            for axy in new_view:\n",
<     "                if len(axy) == 0 or axy is None:\n",
<     "                    axy == [1,1,1]\n",
<     "                elif not isinstance(axy,(list, tuple)):\n",
<     "                    if not isinstance(axy, np.ndarray):\n",
<     "                        raise TypeError('')\n",
<     "                    else:\n",
<     "                        for ii in axy:\n",
<     "                            if not isinstance(ii, (float, int)):\n",
<     "                                raise TypeError('For the axis_align option, the user must pass in '\n",
<     "                                               'a list-like of either integers or floats. User passed '\n",
<     "                                               ' list-like containing type {}.'.format(type(ii)))\n",
<     "            if self.dimension < 3:\n",
<     "                pass\n",
<     "            else:\n",
<     "                orthag = np.cross(new_view[0], new_view[1])\n",
<     "                theta = abs(angle(new_view[0], new_view[1]))\n",
<     "#                     if self.been_mirrored[0] < 0 and self.been_mirrored[2][-1] == ii:\n",
<     "#                         theta *= -1\n",
<     "#####make sure to observe the circumstance in which the angle is greater than 90 and for left  handed matricies\n",
<     "                updated_lat_vecs = np.array([Rotation(theta, orthag).apply_to(jj)[0] for jj in updated_lat_vecs])\n",
<     "                # consider normalizing\n",
<     "                for nn, mm in zip(new_view[0], new_view[1]):\n",
<     "                    nn = np.divide(nn, np.linalg.norm(nn))\n",
<     "                    mm = np.divide(mm, np.linalg.norm(mm))\n",
<     "                # consider employing this when verifying if it works\n",
<     "#                 if not np.allclose(start, destination, atol= 1e-13):\n",
<     "#                     raise ValueError('')\n",
<     "                for part in cmpnd.children:\n",
<     "                    part.pos = Rotation(theta, orthag).apply_to(part.pos)[0]\n",
<     "\n",
902c854
<     "        self.past_lat_vecs.append(np.array(updated_lat_vecs))\n",
---
>     "        self.past_lat_vecs.append(self.lattice_vectors)\n",
943,950c895
<     "        updated_lat_vecs = list(deepcopy(self.lattice_vectors))\n",
<     "        self.been_mirrored[0] *= -1\n",
<     "        self.been_mirrored[1].append(about)\n",
<     "        self.been_mirrored[2].append(which_flip)\n",
<     "        if self.been_mirrored[5]:\n",
<     "            self.been_mirrored[3].clear()\n",
<     "            self.been_mirrored[4].clear()\n",
<     "            self.redo_lat_vecs.clear()\n",
---
>     "        updated_lat_vecs = [kk for kk in self.lattice_vectors]\n",
976,977d920
<     "        print('andy')\n",
<     "        print(updated_lat_vecs)\n",
980,984d922
<     "        print(updated_lat_vecs)\n",
<     "         \n",
<     "        self.past_lat_vecs.append(np.array(updated_lat_vecs))\n",
<     "        self.lattice_vectors = np.array(updated_lat_vecs)\n",
<     "        \n",
987,989d924
<     "        # later on look into the effect of mirroring each individual atom too this may be important for \n",
<     "        # compounds like cholesterol\n",
<     "        \n",
994,1000d928
<     "        \n",
<     "        # work on case of enantiomer.\n",
<     "        \n",
<     "        # ensure that this is compatible with 2d\n",
<     "        \n",
<     "        # in all instances where past_lat_vecs or lattice_vectors are updated ensure\n",
<     "        #they're normalized\n",
1003,1005c931,932
<     "        #self.been_mirrored[5] = False\n",
<     "        start = deepcopy(self.past_lat_vecs.pop())\n",
<     "        self.redo_lat_vecs.append(start)#######\n",
---
>     "        start = self.past_lat_vecs.pop()\n",
>     "        self.redo_lat_vecs.append(start)\n",
1007,1013d933
<     "            if not np.allclose(self.lattice_vectors, np.eye(self.dimension), atol= 1e-13):\n",
<     "                raise ValueError(\"The OG or better known as undo_all feature \"\n",
<     "                                'does not support lattices with lattice '\n",
<     "                                'vectors that are not {}. Instead, call the '\n",
<     "                                'undo_rotation method until the desired '\n",
<     "                                'orientation is achieved.'\n",
<     "                                 .format(np.eye(self.dimension).to_list()))\n",
1015,1117c935,944
<     "                self.redo_lat_vecs.append(self.past_lat_vecs.pop())###\n",
<     "            while len(self.been_mirrored[1]) > 0:\n",
<     "                self.been_mirrored[3].append(self.been_mirrored[1].pop())###\n",
<     "                self.been_mirrored[4].append(self.been_mirrored[2].pop())###\n",
<     "            self.been_mirrored[0] = 1\n",
<     "            destination = self.past_lat_vecs[-1]\n",
<     "            self.lattice_vectors = deepcopy(destination)###\n",
<     "\n",
<     "            R = np.matmul(destination, np.linalg.inv(start))\n",
<     "            for ii in R:\n",
<     "                ii /= np.linalg.norm(ii)\n",
<     "            for part in cmpnd.children:\n",
<     "                part.pos = np.matmul(np.linalg.inv(R), part.pos)           \n",
<     "        else:\n",
<     "            destination = np.array(deepcopy(self.past_lat_vecs[-1]))\n",
<     "            if np.linalg.det(destination)*np.linalg.det(start) < 0:\n",
<     "                self.been_mirrored[5] = False\n",
<     "                self.past_lat_vecs.pop()\n",
<     "                print('this is a mirror')\n",
<     "                print(self.been_mirrored)\n",
<     "                self.mirror(cmpnd, about= self.been_mirrored[1].pop())\n",
<     "                print(self.been_mirrored)\n",
<     "                self.been_mirrored[3].append(self.been_mirrored[1].pop())##\n",
<     "                self.been_mirrored[4].append(self.been_mirrored[2].pop())##\n",
<     "                self.been_mirrored[2].pop()\n",
<     "                print(self.been_mirrored)\n",
<     "                self.been_mirrored[5] = True\n",
<     "            else:\n",
<     "                if self.dimension < 3:\n",
<     "                    pass\n",
<     "                else:\n",
<     "#                     print('__________________________')\n",
<     "#                     print('pre rotation')\n",
<     "#                     print(start)\n",
<     "#                     print(destination)\n",
<     "#                     print('')\n",
<     "                    flag = 0\n",
<     "                    for ii in range(3):\n",
<     "                        if flag == 1:\n",
<     "                            break\n",
<     "                        orthag = np.cross(start[ii], destination[ii])\n",
<     "                        theta = abs(angle(destination[ii], start[ii]))\n",
<     "                        if self.been_mirrored[0] < 0 and self.been_mirrored[2][-1] == ii:\n",
<     "                            theta *= -1\n",
<     "                        start = np.array([Rotation(theta, orthag).apply_to(jj)[0] for jj in start])\n",
<     "#                         print(ii)\n",
<     "#                         print('post rotation')\n",
<     "#                         print(start)\n",
<     "#                         print(destination)\n",
<     "#                         print('')\n",
<     "                        for nn, mm in zip(start, destination):\n",
<     "                            nn = np.divide(nn, np.linalg.norm(nn))\n",
<     "                            mm = np.divide(mm, np.linalg.norm(mm))\n",
<     "#                         print('post normalization')\n",
<     "#                         print(start)\n",
<     "#                         print(destination)\n",
<     "#                         print('')\n",
<     "                        if ii == 1:\n",
<     "                            if np.allclose(start, destination, atol= 1e-13):\n",
<     "                                flag += 1\n",
<     "                        elif ii == 2:\n",
<     "                            if not np.allclose(start, destination, atol= 1e-13):\n",
<     "                                raise ValueError('')\n",
<     "                        for part in cmpnd.children:\n",
<     "                            part.pos = Rotation(theta, orthag).apply_to(part.pos)[0]\n",
<     "                self.lattice_vectors = destination######\n",
<     "        \n",
<     "#         if OG:\n",
<     "#             start = self.past_lat_vecs.pop()\n",
<     "#             self.redo_lat_vecs.append(start)\n",
<     "#             if OG:\n",
<     "#                 while len(self.past_lat_vecs) > 1:\n",
<     "#                     self.redo_lat_vecs.append(self.past_lat_vecs.pop())\n",
<     "#             destination = self.past_lat_vecs[-1]\n",
<     "#             self.lattice_vectors = destination\n",
<     "\n",
<     "#             R = np.matmul(destination, np.linalg.inv(start))\n",
<     "#             for ii in R:\n",
<     "#                 ii /= np.linalg.norm(ii)\n",
<     "#             for part in cmpnd.children:\n",
<     "#                 part.pos = np.matmul(np.linalg.inv(R), part.pos)\n",
<     "#         else:\n",
<     "#             updated_lat_vecs = [kk for kk in ]\n",
<     "#             if self.dimensions < 3:\n",
<     "#                 pass\n",
<     "#             else:\n",
<     "#                 for ii in range(2):\n",
<     "#                     orthag = np.cross(start[ii], destination[ii])\n",
<     "#                     theta = abs(angle(destination[ii], start[ii]))\n",
<     "#                     start = [Rotation(theta, orthag).apply_to(jj)[0] for jj in start]\n",
<     "#                     if ii == 0:\n",
<     "#                         if not np.allclose(start[ii], destination[ii]):\n",
<     "#                             pass\n",
<     "#                     elif ii == 1:\n",
<     "#                         for jj, kk in zip(start, destination):\n",
<     "#                             if not np.allclose(jj, kk):\n",
<     "#                                 pass\n",
<     "#                     for part in cmpnd.children:\n",
<     "#                         part.pos = Rotation(theta, orthag).apply_to(part.pos)[0]\n",
<     "\n",
<     "                \n",
<     "                \n",
<     "            \n",
---
>     "                self.redo_lat_vecs.append(self.past_lat_vecs.pop())\n",
>     "        destination = self.past_lat_vecs[-1]\n",
>     "        self.lattice_vectors = destination\n",
>     "        # and now we rotate\n",
>     "        \n",
>     "        R = np.matmul(destination, np.linalg.inv(start))\n",
>     "        for ii in R:\n",
>     "            ii /= np.linalg.norm(ii)\n",
>     "        for part in cmpnd.children:\n",
>     "            part.pos = np.matmul(R, part.pos)\n",
1124c951,952
<     "        start = deepcopy(np.array(self.past_lat_vecs[-1]))\n",
---
>     "        start = self.past_lat_vecs[-1]\n",
>     "        \n",
1126,1137d953
<     "            warn(\"The redo_all feature is not yet fully developed and currently\"\n",
<     "                \" acts as a placeholder. Instead, please call the redo method\"\n",
<     "                \" until you have reached the desired orientation.\")\n",
<     "            return\n",
<     "#             if np.linalg.det(self.redo_lat_vecs[0])*np.linalg.det(start) < 0:\n",
<     "#                 self.been_mirrored[5] = False\n",
<     "#                 self.mirror(cmpnd, about= 'yz')\n",
<     "#                 start = self.past_lat_vecs.pop()\n",
<     "#                 self.been_mirrored[1].pop()\n",
<     "#                 self.been_mirrored[2].pop()\n",
<     "#                 self.been_mirrored[5] = True\n",
<     "                \n",
1139,1158c955
<     "                #if np.linalg.det(self.past_lat_vecs[-1])\n",
<     "                self.past_lat_vecs.append(self.redo_lat_vecs.pop())####\\\n",
<     "            while len(self.been_mirrored[3]) > 0:\n",
<     "                self.been_mirrored[1].append(self.been_mirrored[3].pop())\n",
<     "                self.been_mirrored[2].append(self.been_mirrored[4].pop())\n",
<     "                self.been_mirrored[0]*= -1\n",
<     "                \n",
<     "            if np.linalg.det(self.past_lat_vecs[-1])*np.linalg.det(start) < 0:\n",
<     "                self.mirror(cmpnd, about= 'xy')\n",
<     "                destination = deepcopy(self.past_lat_vecs.pop())\n",
<     "                self.been_mirrored[1].pop()\n",
<     "                self.been_mirrored[2].pop()\n",
<     "            else:\n",
<     "                destination = deepcopy(self.past_lat_vecs[-1])\n",
<     "            #self.past_lat_vecs.append(destination)##\n",
<     "            R = np.matmul(destination, np.linalg.inv(start))\n",
<     "            for ii in R:\n",
<     "                ii /= np.linalg.norm(ii)\n",
<     "            for part in cmpnd.children:\n",
<     "                part.pos = np.matmul(np.linalg.inv(R), part.pos)\n",
---
>     "                self.past_lat_vecs.append(self.redo_lat_vecs.pop())\n",
1160,1216c957,966
<     "            destination = deepcopy(self.redo_lat_vecs.pop())\n",
<     "            if np.linalg.det(destination)*np.linalg.det(start) < 0:\n",
<     "                self.been_mirrored[5] = False\n",
<     "                print('this is a redo mirror')\n",
<     "                self.mirror(cmpnd, about= self.been_mirrored[3].pop())\n",
<     "                self.been_mirrored[4].pop()\n",
<     "                self.been_mirrored[5] = True\n",
<     "            else:\n",
<     "                if self.dimension < 3:\n",
<     "                    pass\n",
<     "                else:\n",
<     "                    self.past_lat_vecs.append(destination)###\n",
<     "                    self.lattice_vectors = deepcopy(destination)\n",
<     "                    flag = 0\n",
<     "                    for ii in range(3):\n",
<     "                        if flag == 1:\n",
<     "                            break \n",
<     "#                         print('pre rotation')\n",
<     "#                         print(start)\n",
<     "#                         print(destination)\n",
<     "                        orthag = np.cross(start[ii], destination[ii])\n",
<     "#                         print('orthag')\n",
<     "#                         print(orthag)\n",
<     "#                         print(np.linalg.norm(orthag))\n",
<     "                        theta = abs(angle(destination[ii], start[ii]))\n",
<     "                        if self.been_mirrored[0] < 0 and self.been_mirrored[4][-1] == ii:\n",
<     "                            # this check sees if the vectors are left handed and adjusts theta appropriately\n",
<     "                            theta *= -1\n",
<     "#                         print(theta)\n",
<     "                        start = np.array([Rotation(theta, orthag).apply_to(jj)[0] for jj in start])####\n",
<     "#                         print(ii)\n",
<     "#                         print('post rotation')\n",
<     "#                         print(start)\n",
<     "#                         print(destination)\n",
<     "#                         print('')\n",
<     "                        for nn, mm in zip(start, destination):\n",
<     "                            nn = np.divide(nn, np.linalg.norm(nn))\n",
<     "                            mm = np.divide(mm, np.linalg.norm(mm))\n",
<     "                        print('post normalization')\n",
<     "                        print(start)\n",
<     "                        print(destination)\n",
<     "                        print('')\n",
<     "                        if ii == 1:\n",
<     "                            if np.allclose(start, destination, atol= 1e-13):\n",
<     "                                flag += 1\n",
<     "                        elif ii == 2:\n",
<     "                            if not np.allclose(start, destination, atol= 1e-13):\n",
<     "                                raise ValueError('')\n",
<     "                        for part in cmpnd.children:\n",
<     "                            part.pos = Rotation(theta, orthag).apply_to(part.pos)[0]\n",
<     "            \n",
<     "            \n",
<     "        \n",
<     "        #destination = self.past_lat_vecs[-1]\n",
<     "        self.lattice_vectors = deepcopy(self.past_lat_vecs[-1])\n",
<     "        \n",
<     "        \n",
---
>     "            self.past_lat_vecs.append(self.redo_lat_vecs.pop())\n",
>     "        destination = self.past_lat_vecs[-1]\n",
>     "        self.lattice_vectors = destination\n",
>     "        # now we rotate\n",
>     "        \n",
>     "        R = np.matmul(destination, np.linalg.inv(start))\n",
>     "        for ii in R:\n",
>     "            ii /= np.linalg.norm(ii)\n",
>     "        for part in cmpnd.children:\n",
>     "            part.pos = np.matmul(R, part.pos)\n",
1226,1228d975
< <<<<<<< HEAD
<    "execution_count": 329,
< =======
1234,5771d980
<     "from IPython.core.debugger import Tracer;\n",
<     "def fu():\n",
<     "    Tracer()()\n",
<     "    dim = 3\n",
<     "    cscl_lengths = [.4123, .4123, .4123]\n",
<     "    cscl_vectors = [[1,0,0], [0,1,0], [0,0,1]]\n",
<     "    cscl_basis = {'Cs':[[0, 0, 0]], 'Cl':[[.5, .5, .5]]}\n",
<     "    cscl_lattice = Lattice(cscl_lengths, dimension=dim,\n",
<     "                                    lattice_vectors=cscl_vectors, basis_atoms=cscl_basis)\n",
<     "    cs = mb.Compound(name='Cs')\n",
<     "    cl = mb.Compound(name='Cl')\n",
<     "    cscl_dict = {'Cs':cs, 'Cl':cl}\n",
<     "    #cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=3, y=3, z=3)\n",
<     "    cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=2, y=2, z=2)\n",
<     "\n",
<     "\n",
<     "\n",
<     "    import numpy as np\n",
<     "    dum = []\n",
<     "    for part in cscl_crystal:\n",
<     "        if np.array_equal([0,0,0], part.pos):\n",
<     "    #         print(part.pos)\n",
<     "    #         print(type(cscl_crystal))\n",
<     "    #         print(part.name)\n",
<     "            part.name='Rb'\n",
<     "\n",
<     "        if np.sum([1.0308,1.0308,1])<= np.sum(part.pos):\n",
<     "    #         print(part.pos)\n",
<     "    #         print(type(cscl_crystal))\n",
<     "    #         print(part.name)\n",
<     "            part.name='O'\n",
<     "\n",
<     "        if part.pos[0] == 0 and part.pos[1] == 0 and .1<= part.pos[2]<=.5:\n",
<     "    #         print(part.pos)\n",
<     "    #         print(type(cscl_crystal))\n",
<     "    #         print(part.name)\n",
<     "            part.name='N'\n",
<     "        dum.append([part.name, part.pos])\n",
<     "    #print(dum)\n",
<     "    dum = []\n",
<     "    #cscl_crystal.save('cscl_crystal_OG_labeled_3x3x3.mol2', overwrite = True)\n",
<     "    #print(\"da OG\")\n",
<     "    print('OG')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    print(' ')\n",
<     "    OG_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "\n",
<     "    cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,1], 120], degrees= True)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    #cscl_crystal.save('cscl_crystal_AA_120_3x3x3.mol2', overwrite = True)\n",
<     "    #print(\"1st rotation\")\n",
<     "    print('after first rot')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    print(\" \")\n",
<     "    rot1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "    cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,1], 120], degrees= True)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    #print(dum)\n",
<     "    #dum = []\n",
<     "    # not a correct name \n",
<     "    #cscl_crystal.save('cscl_crystal_after_miller_neg211_111_01neg1_from_AA_120_3x3x3.mol2', overwrite = True)\n",
<     "    #print(\"2nd rotation\")\n",
<     "    print('after second rotate')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    print(' ')\n",
<     "    rot2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "\n",
<     "    cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    #print(dum)\n",
<     "    # dum = []\n",
<     "    #cscl_crystal.save('cscl_crystal_undo1.mol2', overwrite = True)\n",
<     "    #print(\"undo 1\")\n",
<     "    print('after first undo')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    undo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "    cscl_lattice.undo_rotation(cmpnd=cscl_crystal)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    # cscl_crystal.save('cscl_crystal_undo2.mol2', overwrite = True)\n",
<     "    # print(\"undo 2\")\n",
<     "    print('after 2nd undo')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    undo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "    cscl_lattice.redo_rotation(cmpnd = cscl_crystal)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    # cscl_crystal.save('cscl_crystal_redo1.mol2', overwrite = True)\n",
<     "    # print(\"redo 1\")\n",
<     "    print('after first redo')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    redo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "\n",
<     "    cscl_lattice.redo_rotation(cmpnd = cscl_crystal)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    # cscl_crystal.save('cscl_crystal_redo2.mol2', overwrite = True)\n",
<     "    # print(\"redo 2\")\n",
<     "    print('after second redo')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    redo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "    cscl_lattice.undo_rotation(cmpnd = cscl_crystal, OG= True)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    # cscl_crystal.save('cscl_crystal_undoall.mol2', overwrite = True)\n",
<     "    # print(\"undo all\")\n",
<     "    print('after undo all')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    undoall_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "    cscl_lattice.redo_rotation(cmpnd = cscl_crystal, redo_all = True)\n",
<     "    # for part in cscl_crystal:\n",
<     "    #     dum.append([part.name, part.pos])\n",
<     "    # print(dum)\n",
<     "    # dum = []\n",
<     "    # cscl_crystal.save('cscl_crystal_redoall.mol2', overwrite = True)\n",
<     "    # print(\"redo all\")\n",
<     "    print('after redo all')\n",
<     "    print(cscl_lattice.lattice_vectors)\n",
<     "    print('lattice vecs')\n",
<     "    print(cscl_lattice.past_lat_vecs)\n",
<     "    print(\"past lat vecs\")\n",
<     "    print(cscl_lattice.redo_lat_vecs)\n",
<     "    print('redo lat vecs')\n",
<     "    redoall_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "\n",
<     "    print(\"Matches:\")\n",
<     "    print(\"OG, undo all, undo 2\")\n",
<     "    print(\"redo all, rotation 2, redo 2 \")\n",
<     "    print(\"rotation 1, redo 1, undo 1\")"
<    ]
<   },
<   {
<    "cell_type": "code",
<    "execution_count": null,
< >>>>>>> origin/coor_changes
<    "metadata": {},
<    "outputs": [
<     {
<      "name": "stderr",
<      "output_type": "stream",
<      "text": [
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "OG\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "rot1\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "mirror1\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "rot2\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "mirror2\n",
<       "andy\n",
<       "[array([-0.23558488,  0.70813182, -0.66561932]), array([-0.35420748,  0.5752242 ,  0.73732909]), array([-0.90500653, -0.40947093, -0.11531146])]\n",
<       "[array([ 0.23558488,  0.70813182, -0.66561932]), array([ 0.35420748,  0.5752242 ,  0.73732909]), array([ 0.90500653, -0.40947093, -0.11531146])]\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "rot3\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]])])\n",
<       "undo1\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "redo lattice Vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]])])\n",
<       "been_mirrored\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), True]\n",
<       "undo2\n",
<       "this is a mirror\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), False]\n",
<       "andy\n",
<       "[array([ 0.23558488,  0.70813182, -0.66561932]), array([ 0.35420748,  0.5752242 ,  0.73732909]), array([ 0.90500653, -0.40947093, -0.11531146])]\n",
<       "[array([-0.23558488,  0.70813182, -0.66561932]), array([-0.35420748,  0.5752242 ,  0.73732909]), array([-0.90500653, -0.40947093, -0.11531146])]\n",
<       "[-1, deque(['yx', 'yz']), deque([2, 0, 0]), deque([]), deque([]), False]\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), False]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "redo lattice Vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "undoall\n",
<       "redo1\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.15800096  0.98440895 -0.07729631]\n",
<       " [ 0.78332691 -0.07729631  0.6167854 ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "redo lat vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yz', 'yx']), deque([0, 2]), True]\n",
<       "redo2\n",
<       "this is a redo mirror\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "redo_lat vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "redo3\n",
<       "post normalization\n",
<       "[[-0.69616457 -0.46325708 -0.54840475]\n",
<       " [ 0.3775098  -0.88600699  0.26921733]\n",
<       " [ 0.61060728  0.01960861 -0.79169076]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.6783564  -0.70076437  0.22082095]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [ 0.64371551 -0.42195547  0.638423  ]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "redo4\n",
<       "this is a redo mirror\n",
<       "andy\n",
<       "[array([-0.23558488,  0.70813182, -0.66561932]), array([-0.35420748,  0.5752242 ,  0.73732909]), array([-0.90500653, -0.40947093, -0.11531146])]\n",
<       "[array([ 0.23558488,  0.70813182, -0.66561932]), array([ 0.35420748,  0.5752242 ,  0.73732909]), array([ 0.90500653, -0.40947093, -0.11531146])]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), True]\n",
<       "redo5\n",
<       "post normalization\n",
<       "[[ 0.01370224  0.81497239 -0.57933777]\n",
<       " [ 0.34831338  0.53921218  0.76676464]\n",
<       " [ 0.93727799 -0.21229749 -0.27647737]]\n",
<       "[[ 0.01370224  0.81497239 -0.57933777]\n",
<       " [ 0.3554421   0.53757956  0.76463659]\n",
<       " [ 0.93459786 -0.21639827 -0.28230946]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.01370224  0.81497239 -0.57933777]\n",
<       " [ 0.3554421   0.53757956  0.76463659]\n",
<       " [ 0.93459786 -0.21639827 -0.28230946]]\n",
<       "[[ 0.01370224  0.81497239 -0.57933777]\n",
<       " [ 0.3554421   0.53757956  0.76463659]\n",
<       " [ 0.93459786 -0.21639827 -0.28230946]]\n",
<       "\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]])])\n",
<       "been_mirrored\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), True]\n",
<       "redo lat vecs\n",
<       "deque([])\n",
<       "undoall2\n",
<       "rotate2 & undo 2\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
< <<<<<<< HEAD
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       " mirror2 & undo1\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       "OG & undoall\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "[ 0.      0.      0.4123]\n",
<       "[  6.93889390e-17  -7.49400542e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.      0.8246]\n",
<       "[  1.38777878e-16  -1.49880108e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.    ]\n",
<       "[  0.00000000e+00   4.12300000e-01   7.42461648e-15]\n",
<       " \n",
<       "[ 0.      0.4123  0.4123]\n",
<       "[  1.11022302e-16   4.12300000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.8246]\n",
<       "[  1.52655666e-16   4.12300000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.    ]\n",
<       "[  0.00000000e+00   8.24600000e-01   1.48492330e-14]\n",
<       " \n",
<       "[ 0.      0.8246  0.4123]\n",
<       "[  1.94289029e-16   8.24600000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.8246]\n",
<       "[  2.22044605e-16   8.24600000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.    ]\n",
<       "[  4.12300000e-01   2.77555756e-17  -9.71445147e-17]\n",
<       " \n",
<       "[ 0.4123  0.      0.4123]\n",
<       "[  4.12300000e-01  -7.54951657e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.8246]\n",
<       "[  4.12300000e-01  -1.50816859e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.    ]\n",
<       "[  4.12300000e-01   4.12300000e-01   7.38298311e-15]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.    ]\n",
<       "[  4.12300000e-01   8.24600000e-01   1.48769885e-14]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.      0.    ]\n",
<       "[  8.24600000e-01   5.55111512e-17  -1.94289029e-16]\n",
<       " \n",
<       "[ 0.8246  0.      0.4123]\n",
<       "[  8.24600000e-01  -7.57727214e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.8246  0.      0.8246]\n",
<       "[  8.24600000e-01  -1.50990331e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.    ]\n",
<       "[  8.24600000e-01   4.12300000e-01   7.27196081e-15]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.    ]\n",
<       "[  8.24600000e-01   8.24600000e-01   1.47659662e-14]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       " \n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       " \n",
<       "OG & undoall2\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.      0.      0.4123]\n",
<       "[ -1.38777878e-16   1.31838984e-16   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.      0.8246]\n",
<       "[ -2.77555756e-16   2.63677968e-16   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.    ]\n",
<       "[ -4.16333634e-16   4.12300000e-01  -2.84494650e-16]\n",
<       " \n",
<       "[ 0.      0.4123  0.4123]\n",
<       "[ -3.88578059e-16   4.12300000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.8246]\n",
<       "[ -6.59194921e-16   4.12300000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.    ]\n",
<       "[ -8.32667268e-16   8.24600000e-01  -5.68989300e-16]\n",
<       " \n",
<       "[ 0.      0.8246  0.4123]\n",
<       "[ -8.32667268e-16   8.24600000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.8246]\n",
<       "[ -7.77156117e-16   8.24600000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.    ]\n",
<       "[  4.12300000e-01   3.05311332e-16   5.55111512e-17]\n",
<       " \n",
<       "[ 0.4123  0.      0.4123]\n",
<       "[  4.12300000e-01   2.77555756e-16   4.12300000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.8246]\n",
<       "[  4.12300000e-01   3.05311332e-16   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.    ]\n",
<       "[  4.12300000e-01   4.12300000e-01  -2.49800181e-16]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.    ]\n",
<       "[  4.12300000e-01   8.24600000e-01  -4.99600361e-16]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.      0.    ]\n",
<       "[  8.24600000e-01   6.10622664e-16   1.11022302e-16]\n",
<       " \n",
<       "[ 0.8246  0.      0.4123]\n",
<       "[  8.24600000e-01   6.10622664e-16   4.12300000e-01]\n",
<       " \n",
<       "[ 0.8246  0.      0.8246]\n",
<       "[  8.24600000e-01   5.55111512e-16   8.24600000e-01]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.    ]\n",
<       "[  8.24600000e-01   4.12300000e-01  -2.77555756e-16]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.    ]\n",
<       "[  8.24600000e-01   8.24600000e-01  -4.99600361e-16]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       " \n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       " \n",
<       "rot3 & redo5\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.3853347  -0.08922101 -0.11639619]\n",
<       "[ 0.3853347  -0.08922101 -0.11639619]\n",
<       " \n",
<       "[ 0.7706694  -0.17844201 -0.23279238]\n",
<       "[ 0.7706694  -0.17844201 -0.23279238]\n",
<       " \n",
<       "[ 0.14654878  0.22164405  0.31525967]\n",
<       "[ 0.14654878  0.22164405  0.31525967]\n",
<       " \n",
<       "[ 0.53188348  0.13242305  0.19886348]\n",
<       "[ 0.53188348  0.13242305  0.19886348]\n",
<       " \n",
<       "[ 0.91721817  0.04320204  0.08246729]\n",
<       "[ 0.91721817  0.04320204  0.08246729]\n",
<       " \n",
<       "[ 0.29309756  0.44328811  0.63051934]\n",
<       "[ 0.29309756  0.44328811  0.63051934]\n",
<       " \n",
<       "[ 0.67843226  0.3540671   0.51412315]\n",
<       "[ 0.67843226  0.3540671   0.51412315]\n",
<       " \n",
<       "[ 1.06376695  0.2648461   0.39772696]\n",
<       "[ 1.06376695  0.2648461   0.39772696]\n",
<       " \n",
<       "[ 0.00564943  0.33601312 -0.23886096]\n",
<       "[ 0.00564943  0.33601312 -0.23886096]\n",
<       " \n",
<       "[ 0.39098413  0.24679211 -0.35525715]\n",
<       "[ 0.39098413  0.24679211 -0.35525715]\n",
<       " \n",
<       "[ 0.77631883  0.15757111 -0.47165334]\n",
<       "[ 0.77631883  0.15757111 -0.47165334]\n",
<       " \n",
<       "[ 0.15219821  0.55765717  0.07639871]\n",
<       "[ 0.15219821  0.55765717  0.07639871]\n",
<       " \n",
<       "[ 0.53753291  0.46843617 -0.03999748]\n",
<       "[ 0.53753291  0.46843617 -0.03999748]\n",
<       " \n",
<       "[ 0.92286761  0.37921516 -0.15639367]\n",
<       "[ 0.92286761  0.37921516 -0.15639367]\n",
<       " \n",
<       "[ 0.29874699  0.77930123  0.39165838]\n",
<       "[ 0.29874699  0.77930123  0.39165838]\n",
<       " \n",
<       "[ 0.68408169  0.69008022  0.27526219]\n",
<       "[ 0.68408169  0.69008022  0.27526219]\n",
<       " \n",
<       "[ 1.06941639  0.60085921  0.158866  ]\n",
<       "[ 1.06941639  0.60085921  0.158866  ]\n",
<       " \n",
<       "[ 0.01129887  0.67202624 -0.47772192]\n",
<       "[ 0.01129887  0.67202624 -0.47772192]\n",
<       " \n",
<       "[ 0.39663356  0.58280523 -0.59411811]\n",
<       "[ 0.39663356  0.58280523 -0.59411811]\n",
<       " \n",
<       "[ 0.78196826  0.49358422 -0.7105143 ]\n",
<       "[ 0.78196826  0.49358422 -0.7105143 ]\n",
<       " \n",
<       "[ 0.15784765  0.89367029 -0.16246225]\n",
<       "[ 0.15784765  0.89367029 -0.16246225]\n",
<       " \n",
<       "[ 0.54318234  0.80444928 -0.27885844]\n",
<       "[ 0.54318234  0.80444928 -0.27885844]\n",
<       " \n",
<       "[ 0.92851704  0.71522828 -0.39525463]\n",
<       "[ 0.92851704  0.71522828 -0.39525463]\n",
<       " \n",
<       "[ 0.30439643  1.11531434  0.15279741]\n",
<       "[ 0.30439643  1.11531434  0.15279741]\n",
<       " \n",
<       "[ 0.68973112  1.02609334  0.03640122]\n",
<       "[ 0.68973112  1.02609334  0.03640122]\n",
<       " \n",
<       "[ 1.07506582  0.93687233 -0.07999496]\n",
<       "[ 1.07506582  0.93687233 -0.07999496]\n",
<       " \n",
<       "[ 0.26876646  0.23421808 -0.01999874]\n",
<       "[ 0.26876646  0.23421808 -0.01999874]\n",
<       " \n",
<       "[ 0.65410115  0.14499708 -0.13639493]\n",
<       "[ 0.65410115  0.14499708 -0.13639493]\n",
<       " \n",
<       "[ 1.03943585  0.05577607 -0.25279112]\n",
<       "[ 1.03943585  0.05577607 -0.25279112]\n",
<       " \n",
<       "[ 0.41531523  0.45586214  0.29526093]\n",
<       "[ 0.41531523  0.45586214  0.29526093]\n",
<       " \n",
<       "[ 0.80064993  0.36664113  0.17886474]\n",
<       "[ 0.80064993  0.36664113  0.17886474]\n",
<       " \n",
<       "[ 1.18598463  0.27742013  0.06246855]\n",
<       "[ 1.18598463  0.27742013  0.06246855]\n",
<       " \n",
<       "[ 0.56186401  0.67750619  0.61052059]\n",
<       "[ 0.56186401  0.67750619  0.61052059]\n",
<       " \n",
<       "[ 0.94719871  0.58828519  0.49412441]\n",
<       "[ 0.94719871  0.58828519  0.49412441]\n",
<       " \n",
<       "[ 1.33253341  0.49906418  0.37772822]\n",
<       "[ 1.33253341  0.49906418  0.37772822]\n",
<       " \n",
<       "[ 0.27441589  0.5702312  -0.2588597 ]\n",
<       "[ 0.27441589  0.5702312  -0.2588597 ]\n",
<       " \n",
<       "[ 0.65975059  0.48101019 -0.37525589]\n",
<       "[ 0.65975059  0.48101019 -0.37525589]\n",
<       " \n",
<       "[ 1.04508528  0.39178919 -0.49165208]\n",
<       "[ 1.04508528  0.39178919 -0.49165208]\n",
<       " \n",
<       "[ 0.42096467  0.79187526  0.05639997]\n",
<       "[ 0.42096467  0.79187526  0.05639997]\n",
<       " \n",
<       "[ 0.80629937  0.70265425 -0.05999622]\n",
<       "[ 0.80629937  0.70265425 -0.05999622]\n",
<       " \n",
<       "[ 1.19163406  0.61343324 -0.17639241]\n",
<       "[ 1.19163406  0.61343324 -0.17639241]\n",
<       " \n",
<       "[ 0.56751345  1.01351931  0.37165963]\n",
<       "[ 0.56751345  1.01351931  0.37165963]\n",
<       " \n",
<       "[ 0.95284814  0.9242983   0.25526344]\n",
<       "[ 0.95284814  0.9242983   0.25526344]\n",
<       " \n",
<       "[ 1.33818284  0.8350773   0.13886725]\n",
<       "[ 1.33818284  0.8350773   0.13886725]\n",
<       " \n",
<       "[ 0.28006532  0.90624432 -0.49772066]\n",
<       "[ 0.28006532  0.90624432 -0.49772066]\n",
<       " \n",
<       "[ 0.66540002  0.81702331 -0.61411685]\n",
<       "[ 0.66540002  0.81702331 -0.61411685]\n",
<       " \n",
<       "[ 1.05073472  0.72780231 -0.73051304]\n",
<       "[ 1.05073472  0.72780231 -0.73051304]\n",
<       " \n",
<       "[ 0.4266141   1.12788837 -0.182461  ]\n",
<       "[ 0.4266141   1.12788837 -0.182461  ]\n",
<       " \n",
<       "[ 0.8119488   1.03866737 -0.29885718]\n",
<       "[ 0.8119488   1.03866737 -0.29885718]\n",
<       " \n",
<       "[ 1.1972835   0.94944636 -0.41525337]\n",
<       "[ 1.1972835   0.94944636 -0.41525337]\n",
<       " \n",
<       "[ 0.57316288  1.34953243  0.13279867]\n",
<       "[ 0.57316288  1.34953243  0.13279867]\n",
<       " \n",
<       "[ 0.95849758  1.26031142  0.01640248]\n",
<       "[ 0.95849758  1.26031142  0.01640248]\n",
<       " \n",
<       "[ 1.34383228  1.17109042 -0.09999371]\n",
<       "[ 1.34383228  1.17109042 -0.09999371]\n",
<       " \n",
<       " rot1 & redo1\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778  0.13765425]\n",
<       "[ 0.25616819  0.29226778  0.13765425]\n",
<       " \n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766  -0.19812569]\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "[ 1.26574445 -0.7252766  -0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       " \n",
<       " mirror 1 & redo2\n",
<       "[ 0.  0. -0.]\n",
<       "[ 0.  0. -0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       " \n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       " \n",
<       "rotate2 & redo3\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       " mirror2 & redo4\n",
<       "[-0.  0.  0.]\n",
<       "[-0.  0.  0.]\n",
<       " \n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       " \n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       " \n"
< =======
<       "> \u001b[0;32m<ipython-input-2-2ca16e34e839>\u001b[0m(91)\u001b[0;36mfuck\u001b[0;34m()\u001b[0m\n",
<       "\u001b[0;32m     89 \u001b[0;31m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0m\u001b[0;32m     90 \u001b[0;31m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0m\u001b[0;32m---> 91 \u001b[0;31m    \u001b[0mcscl_lattice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mundo_rotation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcmpnd\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mcscl_crystal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0m\u001b[0;32m     92 \u001b[0;31m    \u001b[0;31m# for part in cscl_crystal:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0m\u001b[0;32m     93 \u001b[0;31m    \u001b[0;31m#     dum.append([part.name, part.pos])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0m\n"
< >>>>>>> origin/coor_changes
<      ]
<     }
<    ],
<    "source": [
< <<<<<<< HEAD
<     "# # this cell tests the ability of the undo and redo (and un/redoall) methods to handle multiple mirrors and rotations\n",
<     "\n",
<     "\n",
<     "# import mbuild as mb\n",
<     "\n",
<     "# dim = 3\n",
<     "# cscl_lengths = [.4123, .4123, .4123]\n",
<     "# cscl_vectors = [[1,0,0], [0,1,0], [0,0,1]]\n",
<     "# cscl_basis = {'Cs':[[0, 0, 0]], 'Cl':[[.5, .5, .5]]}\n",
<     "# cscl_lattice = Lattice(cscl_lengths, dimension=dim,\n",
<     "#                                 lattice_vectors=cscl_vectors, basis_atoms=cscl_basis)\n",
<     "# cs = mb.Compound(name='Cs')\n",
<     "# cl = mb.Compound(name='Cl')\n",
<     "# cscl_dict = {'Cs':cs, 'Cl':cl}\n",
<     "# cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=3, y=3, z=3)\n",
<     "# #cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=2, y=2, z=2)\n",
<     "\n",
<     "\n",
<     "# import numpy as np\n",
<     "# dum = []\n",
<     "# for part in cscl_crystal:\n",
<     "#     if np.array_equal([0,0,0], part.pos):\n",
<     "# #         print(part.pos)\n",
<     "# #         print(type(cscl_crystal))\n",
<     "# #         print(part.name)\n",
<     "#         part.name='Rb'\n",
<     "\n",
<     "#     if np.sum([1.0308,1.0308,1])<= np.sum(part.pos):\n",
<     "# #         print(part.pos)\n",
<     "# #         print(type(cscl_crystal))\n",
<     "# #         print(part.name)\n",
<     "#         part.name='O'\n",
<     "\n",
<     "#     if part.pos[0] == 0 and part.pos[1] == 0 and .1<= part.pos[2]<=.5:\n",
<     "# #         print(part.pos)\n",
<     "# #         print(type(cscl_crystal))\n",
<     "# #         print(part.name)\n",
<     "#         part.name='N'\n",
<     "# #cscl_crystal.save('cscl_crystal_OG_labeled_3x3x3.mol2', overwrite = True)\n",
<     "# OG_crystal = mb.compound.clone(cscl_crystal) \n",
<     "# print('OG')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# print('rot1')\n",
<     "# # cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "# #                             new_view= [[-2,1,1], [1,1,1], [0,1,-1]],\n",
<     "# #                             miller_directions= True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [.567, .9, -.257],\n",
<     "#                             by_angles= True)\n",
<     "# #cscl_crystal.save('cscl_crystal_rot1_miller_neg211_111_01neg1.mol2', overwrite = True)\n",
<     "# rotate1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# print('mirror1')\n",
<     "# cscl_lattice.mirror(cmpnd= cscl_crystal, about= 'yx')\n",
<     "# #cscl_crystal.save('cscl_crystal_mirror1_xy.mol2', overwrite = True)\n",
<     "# mirror1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# print('rot2')\n",
<     "# # cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "# #                             new_view= [[-2,1,1], -20], degrees= True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[-2,1,1], [1,1,1], [0,1,-1]],\n",
<     "#                             miller_directions= True)\n",
<     "# #cscl_crystal.save('cscl_crystal_rot2_AA_neg211_neg20.mol2', overwrite = True)\n",
<     "# rotate2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# print('mirror2')\n",
<     "# cscl_lattice.mirror(cmpnd= cscl_crystal, about= 'yz')\n",
<     "# #cscl_crystal.save('cscl_crystal_mirror2_yz.mol2', overwrite = True)\n",
<     "# mirror2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# print('rot3')\n",
<     "# # cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "# #                             new_view= [30,30,40],\n",
<     "# #                             degrees = True, by_angles = True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[-3,-3,-4],-15],\n",
<     "#                             degrees = True)\n",
<     "# #cscl_crystal.save('cscl_crystal_rot3_byangles_303040.mol2', overwrite = True)\n",
<     "# rotate3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "# # print('undoall')\n",
<     "# # cscl_lattice.undo_rotation(cmpnd= cscl_crystal, OG= True)\n",
<     "# # undoall_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# ########################################## with these instructions, redo3 fails when using undo all but not when \n",
<     "# ########################################## using undo 1-5. Undo all worked previously.\n",
<     "# ##????^^^\n",
<     "\n",
<     "# print('undo1')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# cscl_crystal.save('cscl_crystal_undo1.mol2', overwrite = True)\n",
<     "# undo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo lattice Vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('undo2')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# cscl_crystal.save('cscl_crystal_undo2.mol2', overwrite = True)\n",
<     "# undo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo lattice Vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('undo3')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# cscl_crystal.save('cscl_crystal_undo3.mol2', overwrite = True)\n",
<     "# undo3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo lattice Vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('undo4')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# cscl_crystal.save('cscl_crystal_undo4.mol2', overwrite = True)\n",
<     "# undo4_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('undo5')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# cscl_crystal.save('cscl_crystal_undo5.mol2', overwrite = True)\n",
<     "# undo5_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('redo lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "# # print('undoall')\n",
<     "# # cscl_lattice.undo_rotation(cmpnd= cscl_crystal, OG= True)\n",
<     "# # undoall_crystal = mb.compound.clone(cscl_crystal)\n",
<     "\n",
<     "# print('redo1')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo1.mol2', overwrite = True)\n",
<     "# redo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('redo2')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo2.mol2', overwrite = True)\n",
<     "# redo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('redo3')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo3.mol2', overwrite = True)\n",
<     "# redo3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('redo4')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo4.mol2', overwrite = True)\n",
<     "# redo4_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('redo5')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo5.mol2', overwrite = True)\n",
<     "# redo5_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('redo lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "\n",
<     "# # print('redoall')\n",
<     "# # cscl_lattice.redo_rotation(cmpnd= cscl_crystal, redo_all= True)\n",
<     "# # #cscl_crystal.save('cscl_crystal_redoall.mol2', overwrite = True)\n",
<     "# # redoall_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# # print('past lattice Vecs')\n",
<     "# # print(cscl_lattice.past_lat_vecs)\n",
<     "# # print('been_mirrored')\n",
<     "# # print(cscl_lattice.been_mirrored)\n",
<     "# # print('redo lat vecs')\n",
<     "# # print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "# # print('final rot')\n",
<     "# # cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,1], 120],\n",
<     "# #                             degrees= True)\n",
<     "# # final_rot_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# # print('past lattice Vecs')\n",
<     "# # print(cscl_lattice.past_lat_vecs)\n",
<     "# # print('been_mirrored')\n",
<     "# # print(cscl_lattice.been_mirrored)\n",
<     "# # print('redo lat vecs')\n",
<     "# # print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "\n",
<     "# print('OG & undo5')\n",
<     "# for part1, part2 in zip(OG_crystal, undo5_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" rot1 & undo4\")\n",
<     "# for part1, part2 in zip(rotate1_crystal, undo4_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" mirror 1 & undo 3\")\n",
<     "# for part1, part2 in zip(undo3_crystal, mirror1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print('rotate2 & undo 2')\n",
<     "# for part1, part2 in zip(undo2_crystal, rotate2_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" mirror2 & undo1\")\n",
<     "# for part1, part2 in zip(mirror2_crystal, undo1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "    \n",
<     "# # print('OG & undoall')\n",
<     "# # for part1, part2 in zip(OG_crystal, undoall_crystal):\n",
<     "# #     print(part1.pos)\n",
<     "# #     print(part2.pos)\n",
<     "# #     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "# #     print(' ')\n",
<     "\n",
<     "# print('rot3 & redo5')\n",
<     "# for part1, part2 in zip(rotate3_crystal, redo5_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" rot1 & redo1\")\n",
<     "# for part1, part2 in zip(rotate1_crystal, redo1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" mirror 1 & redo2\")\n",
<     "# for part1, part2 in zip(redo2_crystal, mirror1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print('rotate2 & redo3')\n",
<     "# for part1, part2 in zip(undo2_crystal, rotate2_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "# print(\" mirror2 & redo4\")\n",
<     "# for part1, part2 in zip(mirror2_crystal, redo4_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "\n",
<     "\n",
<     "# # print('rot3 & redoall')\n",
<     "# # for part1, part2 in zip(rotate3_crystal, redoall_crystal):\n",
<     "# #     print(part1.pos)\n",
<     "# #     print(part2.pos)\n",
<     "# #     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "# #     print(' ')\n",
<     "\n",
<     "\n",
<     "\n"
< =======
<     "fu()"
< >>>>>>> origin/coor_changes
<    ]
<   },
<   {
<    "cell_type": "code",
<    "execution_count": null,
<    "metadata": {
< <<<<<<< HEAD
<     "collapsed": true
<    },
<    "outputs": [],
<    "source": []
<   },
<   {
<    "cell_type": "code",
<    "execution_count": 320,
<    "metadata": {
<     "scrolled": true
<    },
<    "outputs": [
<     {
<      "name": "stderr",
<      "output_type": "stream",
<      "text": [
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "OG\n",
<       "past\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "redo\n",
<       "deque([])\n",
<       "been mirrored\n",
<       "[1, deque([]), deque([]), deque([]), deque([]), True]\n",
<       "rot1\n",
<       "det\n",
<       "1.0\n",
<       "past\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "redo\n",
<       "deque([])\n",
<       "been mirrored\n",
<       "[1, deque([]), deque([]), deque([]), deque([]), True]\n",
<       "mirror1\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "rot2\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "mirror2\n",
<       "andy\n",
<       "[array([-0.23558488,  0.70813182, -0.66561932]), array([-0.35420748,  0.5752242 ,  0.73732909]), array([-0.90500653, -0.40947093, -0.11531146])]\n",
<       "[array([ 0.23558488,  0.70813182, -0.66561932]), array([ 0.35420748,  0.5752242 ,  0.73732909]), array([ 0.90500653, -0.40947093, -0.11531146])]\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "rot3\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]])])\n",
<       "undo1\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "redo lattice Vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]])])\n",
<       "been_mirrored\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), True]\n",
<       "undo2\n",
<       "this is a mirror\n",
<       "[1, deque(['yx', 'yz']), deque([2, 0]), deque([]), deque([]), False]\n",
<       "andy\n",
<       "[array([ 0.23558488,  0.70813182, -0.66561932]), array([ 0.35420748,  0.5752242 ,  0.73732909]), array([ 0.90500653, -0.40947093, -0.11531146])]\n",
<       "[array([-0.23558488,  0.70813182, -0.66561932]), array([-0.35420748,  0.5752242 ,  0.73732909]), array([-0.90500653, -0.40947093, -0.11531146])]\n",
<       "[-1, deque(['yx', 'yz']), deque([2, 0, 0]), deque([]), deque([]), False]\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), False]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "redo lattice Vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "undo3\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "redo lattice Vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "undo4\n",
<       "this is a mirror\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), False]\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[1, deque(['yx']), deque([2, 2]), deque(['yz']), deque([0]), False]\n",
<       "[1, deque([]), deque([]), deque(['yz', 'yx']), deque([0, 2]), False]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yz', 'yx']), deque([0, 2]), True]\n",
<       "undo5\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yz', 'yx']), deque([0, 2]), True]\n",
<       "redo lat vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "redo1\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.15800096  0.98440895 -0.07729631]\n",
<       " [ 0.78332691 -0.07729631  0.6167854 ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "redo lat vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yz', 'yx']), deque([0, 2]), True]\n",
<       "lat vecs\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "redo2\n",
<       "this is a redo mirror\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "redo_lat vecs\n",
<       "deque([array([[ 0.01370224,  0.81497239, -0.57933777],\n",
<       "       [ 0.3554421 ,  0.53757956,  0.76463659],\n",
<       "       [ 0.93459786, -0.21639827, -0.28230946]]), array([[ 0.23558488,  0.70813182, -0.66561932],\n",
<       "       [ 0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [ 0.90500653, -0.40947093, -0.11531146]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "redo3\n",
<       "post normalization\n",
<       "[[-0.69616457 -0.46325708 -0.54840475]\n",
<       " [ 0.3775098  -0.88600699  0.26921733]\n",
<       " [ 0.61060728  0.01960861 -0.79169076]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.6783564  -0.70076437  0.22082095]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [ 0.64371551 -0.42195547  0.638423  ]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "post normalization\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "[[-0.23558488  0.70813182 -0.66561932]\n",
<       " [-0.35420748  0.5752242   0.73732909]\n",
<       " [-0.90500653 -0.40947093 -0.11531146]]\n",
<       "\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]])])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque(['yz']), deque([0]), True]\n",
<       "second rotate 1\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[-0.60921256,  0.72877813, -0.31263796],\n",
<       "       [-0.21715903,  0.2258573 ,  0.94964753],\n",
<       "       [-0.76269392, -0.64642936, -0.02066565]])])\n",
<       "redo_lat vecs\n",
<       "deque([])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque([]), deque([]), True]\n",
<       "second rotate 2\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[-0.60921256,  0.72877813, -0.31263796],\n",
<       "       [-0.21715903,  0.2258573 ,  0.94964753],\n",
<       "       [-0.76269392, -0.64642936, -0.02066565]]), array([[-0.83684675,  0.5369044 ,  0.10686996],\n",
<       "       [ 0.063673  , -0.09843189,  0.99310468],\n",
<       "       [-0.54372169, -0.83788115, -0.04818609]])])\n",
<       "redo_lat vecs\n",
<       "deque([])\n",
<       "been_mirrored\n",
<       "[-1, deque(['yx']), deque([2]), deque([]), deque([]), True]\n",
<       "second undo all\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "redo_lat vecs\n",
<       "deque([array([[-0.83684675,  0.5369044 ,  0.10686996],\n",
<       "       [ 0.063673  , -0.09843189,  0.99310468],\n",
<       "       [-0.54372169, -0.83788115, -0.04818609]]), array([[-0.60921256,  0.72877813, -0.31263796],\n",
<       "       [-0.21715903,  0.2258573 ,  0.94964753],\n",
<       "       [-0.76269392, -0.64642936, -0.02066565]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yx']), deque([2]), True]\n",
<       "lat vecs\n",
<       "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n",
<       "second redo1\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.15800096  0.98440895 -0.07729631]\n",
<       " [ 0.78332691 -0.07729631  0.6167854 ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "\n",
<       "det\n",
<       "1.0\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]])])\n",
<       "redo_lat vecs\n",
<       "deque([array([[-0.83684675,  0.5369044 ,  0.10686996],\n",
<       "       [ 0.063673  , -0.09843189,  0.99310468],\n",
<       "       [-0.54372169, -0.83788115, -0.04818609]]), array([[-0.60921256,  0.72877813, -0.31263796],\n",
<       "       [-0.21715903,  0.2258573 ,  0.94964753],\n",
<       "       [-0.76269392, -0.64642936, -0.02066565]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]])])\n",
<       "been_mirrored\n",
<       "[1, deque([]), deque([]), deque(['yx']), deque([2]), True]\n",
<       "lat vecs\n",
<       "[[ 0.60119435 -0.15800096 -0.78332691]\n",
<       " [ 0.62131504  0.70887164  0.33386915]\n",
<       " [ 0.50252659 -0.68741304  0.524338  ]]\n",
<       "second redo all\n",
<       "andy\n",
<       "[array([ 0.60119435, -0.15800096, -0.78332691]), array([ 0.62131504,  0.70887164,  0.33386915]), array([ 0.50252659, -0.68741304,  0.524338  ])]\n",
<       "[array([ 0.60119435, -0.15800096,  0.78332691]), array([ 0.62131504,  0.70887164, -0.33386915]), array([ 0.50252659, -0.68741304, -0.524338  ])]\n",
<       "det\n",
<       "-1.0\n",
<       "past lattice Vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[ 0.60119435, -0.15800096, -0.78332691],\n",
<       "       [ 0.62131504,  0.70887164,  0.33386915],\n",
<       "       [ 0.50252659, -0.68741304,  0.524338  ]]), array([[ 0.60119435, -0.15800096,  0.78332691],\n",
<       "       [ 0.62131504,  0.70887164, -0.33386915],\n",
<       "       [ 0.50252659, -0.68741304, -0.524338  ]]), array([[-0.23558488,  0.70813182, -0.66561932],\n",
<       "       [-0.35420748,  0.5752242 ,  0.73732909],\n",
<       "       [-0.90500653, -0.40947093, -0.11531146]]), array([[-0.60921256,  0.72877813, -0.31263796],\n",
<       "       [-0.21715903,  0.2258573 ,  0.94964753],\n",
<       "       [-0.76269392, -0.64642936, -0.02066565]]), array([[-0.83684675,  0.5369044 ,  0.10686996],\n",
<       "       [ 0.063673  , -0.09843189,  0.99310468],\n",
<       "       [-0.54372169, -0.83788115, -0.04818609]])])\n",
<       "redo_lat vecs\n",
<       "deque([])\n",
<       "been_mirrored\n",
<       "[1, deque(['yx']), deque([2]), deque([]), deque([]), True]\n",
<       "lat vecs\n",
<       "[[-0.83684675  0.5369044   0.10686996]\n",
<       " [ 0.063673   -0.09843189  0.99310468]\n",
<       " [-0.54372169 -0.83788115 -0.04818609]]\n",
<       "OG & undo5\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.      0.      0.4123]\n",
<       "[  3.69823039e-16  -7.46624984e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.      0.8246]\n",
<       "[  7.39646079e-16  -1.49324997e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.    ]\n",
<       "[ -5.72181191e-18   4.12300000e-01   7.38298311e-15]\n",
<       " \n",
<       "[ 0.      0.4123  0.4123]\n",
<       "[  3.81665303e-16   4.12300000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.8246]\n",
<       "[  7.68618737e-16   4.12300000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.    ]\n",
<       "[ -1.14436238e-17   8.24600000e-01   1.47659662e-14]\n",
<       " \n",
<       "[ 0.      0.8246  0.4123]\n",
<       "[  3.51440522e-16   8.24600000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.8246]\n",
<       "[  7.63330606e-16   8.24600000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.    ]\n",
<       "[  4.12300000e-01   5.92318303e-17  -3.94365256e-16]\n",
<       " \n",
<       "[ 0.4123  0.      0.4123]\n",
<       "[  4.12300000e-01  -7.57727214e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.8246]\n",
<       "[  4.12300000e-01  -1.49324997e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.    ]\n",
<       "[  4.12300000e-01   4.12300000e-01   7.02216063e-15]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.    ]\n",
<       "[  4.12300000e-01   8.24600000e-01   1.44884105e-14]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.      0.    ]\n",
<       "[  8.24600000e-01   1.18463661e-16  -7.88730511e-16]\n",
<       " \n",
<       "[ 0.8246  0.      0.4123]\n",
<       "[  8.24600000e-01  -7.57727214e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.8246  0.      0.8246]\n",
<       "[  8.24600000e-01  -1.51545443e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.    ]\n",
<       "[  8.24600000e-01   4.12300000e-01   6.77236045e-15]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.    ]\n",
<       "[  8.24600000e-01   8.24600000e-01   1.40443213e-14]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       " \n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       " \n",
<       " rot1 & undo4\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0. -0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778  0.13765425]\n",
<       "[ 0.25616819  0.29226778  0.13765425]\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       " \n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766  -0.19812569]\n",
<       "[ 1.26574445 -0.7252766  -0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       " \n",
<       " mirror 1 & undo 3\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0. -0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       " \n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       " \n",
<       "rotate2 & undo 2\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       " mirror2 & undo1\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       "[ 0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       "[ 0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       "[ 0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       "[ 0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       "[ 0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       "[ 0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       "[ 0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       "[ 1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       "[ 0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       "[ 0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       "[ 0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       "[ 0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       "[ 0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       "[ 0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       "[ 0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       "[ 0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       "[ 1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       "[ 0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       "[ 0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       "[ 0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       "[ 0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       "[ 0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       "[ 1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       "[ 0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       "[ 0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       "[ 1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       "[ 0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       "[ 0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       "[ 1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       "[ 0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       "[ 0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       "[ 1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       "[ 0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       "[ 0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       "[ 1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n",
<       "[ 0.40528444  0.47211416 -0.28342334]\n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       " \n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       "[ 0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       "[ 1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       "[ 0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       "[ 0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       "[ 1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       "[ 0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       "[ 1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       "[ 1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       "[ 0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       "[ 0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       "[ 1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       "[ 0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       "[ 1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       "[ 1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       "[ 0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       "[ 1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       "[ 1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       " rot1 & redo1\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       "[ 0.20719171 -0.2834204   0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       "[ 0.41438342 -0.56684079  0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778  0.13765425]\n",
<       "[ 0.25616819  0.29226778  0.13765425]\n",
<       " \n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       "[ 0.4633599   0.00884738  0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       "[ 0.67055162 -0.27457301  0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       "[ 0.51233638  0.58453556  0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       "[ 0.7195281   0.30111516  0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       "[ 0.92671981  0.01769476  0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       "[ 0.24787243 -0.0651438  -0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       "[ 0.45506414 -0.34856419 -0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       "[ 0.66225585 -0.63198459  0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       "[ 0.50404062  0.22712398 -0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       "[ 0.71123233 -0.05629642  0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       "[ 0.91842405 -0.33971681  0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       "[ 0.76020882  0.51939176 -0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       "[ 0.96740053  0.23597136  0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       "[ 1.17459224 -0.04744903  0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       "[ 0.49574486 -0.1302876  -0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       "[ 0.70293657 -0.41370799 -0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       "[ 0.91012828 -0.69712839 -0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       "[ 0.75191305  0.16198018 -0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       "[ 0.95910477 -0.12144021 -0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       "[ 1.16629648 -0.40486061 -0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       "[ 1.00808125  0.45424796 -0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       "[ 1.21527296  0.17082757 -0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       "[ 1.42246467 -0.11259283  0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       "[ 0.35561617 -0.02814821  0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       "[ 0.56280788 -0.3115686   0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       "[ 0.76999959 -0.594989    0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       "[ 0.61178436  0.26411957  0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       "[ 0.81897607 -0.01930083  0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       "[ 1.02616778 -0.30272122  0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       "[ 0.86795255  0.55638735  0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       "[ 1.07514426  0.27296695  0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       "[ 1.28233597 -0.01045344  0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       "[ 0.6034886  -0.09329201 -0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       "[ 0.81068031 -0.3767124  -0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       "[ 1.01787202 -0.6601328   0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       "[ 0.85965679  0.19897577 -0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       "[ 1.0668485  -0.08444462  0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       "[ 1.27404021 -0.36786502  0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       "[ 1.11582498  0.49124355 -0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       "[ 1.32301669  0.20782316  0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724  0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       "[ 0.85136103 -0.1584358  -0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       "[ 1.05855274 -0.4418562  -0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766  -0.19812569]\n",
<       "[ 1.26574445 -0.7252766  -0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       "[ 1.10752922  0.13383198 -0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       "[ 1.31472093 -0.14958842 -0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       "[ 1.52191264 -0.43300882 -0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       "[ 1.36369741  0.42609975 -0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       "[ 1.57088912  0.14267936 -0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       "[ 1.77808084 -0.14074104  0.07718281]\n",
<       " \n",
<       " mirror 1 & redo2\n",
<       "[ 0.  0. -0.]\n",
<       "[ 0.  0. -0.]\n",
<       " \n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       "[ 0.20719171 -0.2834204  -0.21618456]\n",
<       " \n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       "[ 0.41438342 -0.56684079 -0.43236912]\n",
<       " \n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       "[ 0.25616819  0.29226778 -0.13765425]\n",
<       " \n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       "[ 0.4633599   0.00884738 -0.35383881]\n",
<       " \n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       "[ 0.67055162 -0.27457301 -0.57002337]\n",
<       " \n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       "[ 0.51233638  0.58453556 -0.2753085 ]\n",
<       " \n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       "[ 0.7195281   0.30111516 -0.49149306]\n",
<       " \n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       "[ 0.92671981  0.01769476 -0.70767762]\n",
<       " \n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       "[ 0.24787243 -0.0651438   0.32296568]\n",
<       " \n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       "[ 0.45506414 -0.34856419  0.10678113]\n",
<       " \n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       "[ 0.66225585 -0.63198459 -0.10940343]\n",
<       " \n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       "[ 0.50404062  0.22712398  0.18531143]\n",
<       " \n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       "[ 0.71123233 -0.05629642 -0.03087313]\n",
<       " \n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       "[ 0.91842405 -0.33971681 -0.24705768]\n",
<       " \n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       "[ 0.76020882  0.51939176  0.04765718]\n",
<       " \n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       "[ 0.96740053  0.23597136 -0.16852738]\n",
<       " \n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       "[ 1.17459224 -0.04744903 -0.38471194]\n",
<       " \n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       "[ 0.49574486 -0.1302876   0.64593137]\n",
<       " \n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       "[ 0.70293657 -0.41370799  0.42974681]\n",
<       " \n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       "[ 0.91012828 -0.69712839  0.21356225]\n",
<       " \n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       "[ 0.75191305  0.16198018  0.50827712]\n",
<       " \n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       "[ 0.95910477 -0.12144021  0.29209256]\n",
<       " \n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       "[ 1.16629648 -0.40486061  0.075908  ]\n",
<       " \n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       "[ 1.00808125  0.45424796  0.37062287]\n",
<       " \n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       "[ 1.21527296  0.17082757  0.15443831]\n",
<       " \n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       "[ 1.42246467 -0.11259283 -0.06174625]\n",
<       " \n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       "[ 0.35561617 -0.02814821 -0.01543656]\n",
<       " \n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       "[ 0.56280788 -0.3115686  -0.23162112]\n",
<       " \n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       "[ 0.76999959 -0.594989   -0.44780568]\n",
<       " \n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       "[ 0.61178436  0.26411957 -0.15309081]\n",
<       " \n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       "[ 0.81897607 -0.01930083 -0.36927537]\n",
<       " \n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       "[ 1.02616778 -0.30272122 -0.58545993]\n",
<       " \n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       "[ 0.86795255  0.55638735 -0.29074506]\n",
<       " \n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       "[ 1.07514426  0.27296695 -0.50692962]\n",
<       " \n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       "[ 1.28233597 -0.01045344 -0.72311418]\n",
<       " \n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       "[ 0.6034886  -0.09329201  0.30752912]\n",
<       " \n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       "[ 0.81068031 -0.3767124   0.09134456]\n",
<       " \n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       "[ 1.01787202 -0.6601328  -0.12484   ]\n",
<       " \n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       "[ 0.85965679  0.19897577  0.16987487]\n",
<       " \n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       "[ 1.0668485  -0.08444462 -0.04630969]\n",
<       " \n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       "[ 1.27404021 -0.36786502 -0.26249425]\n",
<       " \n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       "[ 1.11582498  0.49124355  0.03222062]\n",
<       " \n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       "[ 1.32301669  0.20782316 -0.18396394]\n",
<       " \n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       "[ 1.53020841 -0.07559724 -0.4001485 ]\n",
<       " \n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       "[ 0.85136103 -0.1584358   0.63049481]\n",
<       " \n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       "[ 1.05855274 -0.4418562   0.41431025]\n",
<       " \n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       "[ 1.26574445 -0.7252766   0.19812569]\n",
<       " \n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       "[ 1.10752922  0.13383198  0.49284056]\n",
<       " \n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       "[ 1.31472093 -0.14958842  0.276656  ]\n",
<       " \n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       "[ 1.52191264 -0.43300882  0.06047144]\n",
<       " \n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       "[ 1.36369741  0.42609975  0.3551863 ]\n",
<       " \n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       "[ 1.57088912  0.14267936  0.13900175]\n",
<       " \n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       "[ 1.77808084 -0.14074104 -0.07718281]\n",
<       " \n",
<       "rotate2 & redo3\n",
<       "[-0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       "[-0.37313419 -0.16882487 -0.04754292]\n",
<       " \n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       "[-0.74626839 -0.33764973 -0.09508583]\n",
<       " \n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       "[-0.14603974  0.23716494  0.30400078]\n",
<       " \n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       "[-0.51917394  0.06834007  0.25645787]\n",
<       " \n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       "[-0.89230813 -0.10048479  0.20891495]\n",
<       " \n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       "[-0.29207949  0.47432987  0.60800157]\n",
<       " \n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       "[-0.66521368  0.30550501  0.56045865]\n",
<       " \n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       "[-1.03834788  0.13668014  0.51291573]\n",
<       " \n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       "[-0.09713165  0.29196275 -0.27443485]\n",
<       " \n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       "[-0.47026584  0.12313789 -0.32197776]\n",
<       " \n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       "[-0.84340003 -0.04568698 -0.36952068]\n",
<       " \n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       "[-0.24317139  0.52912769  0.02956594]\n",
<       " \n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       "[-0.61630559  0.36030282 -0.01797698]\n",
<       " \n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       "[-0.98943978  0.19147796 -0.0655199 ]\n",
<       " \n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       "[-0.38921114  0.76629262  0.33356672]\n",
<       " \n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       "[-0.76234533  0.59746776  0.2860238 ]\n",
<       " \n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       "[-1.13547952  0.42864289  0.23848089]\n",
<       " \n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       "[-0.1942633   0.5839255  -0.54886969]\n",
<       " \n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       "[-0.56739749  0.41510064 -0.59641261]\n",
<       " \n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       "[-0.94053168  0.24627577 -0.64395553]\n",
<       " \n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       "[-0.34030304  0.82109044 -0.24486891]\n",
<       " \n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       "[-0.71343723  0.65226557 -0.29241183]\n",
<       " \n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       "[-1.08657143  0.48344071 -0.33995474]\n",
<       " \n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       "[-0.48634278  1.05825537  0.05913187]\n",
<       " \n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       "[-0.85947698  0.88943051  0.01158896]\n",
<       " \n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       "[-1.23261117  0.72060564 -0.03595396]\n",
<       " \n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       "[-0.30815279  0.18015141 -0.00898849]\n",
<       " \n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       "[-0.68128699  0.01132655 -0.05653141]\n",
<       " \n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       "[-1.05442118 -0.15749832 -0.10407432]\n",
<       " \n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       "[-0.45419254  0.41731635  0.29501229]\n",
<       " \n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       "[-0.82732673  0.24849148  0.24746938]\n",
<       " \n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       "[-1.20046092  0.07966662  0.19992646]\n",
<       " \n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       "[-0.60023228  0.65448128  0.59901308]\n",
<       " \n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       "[-0.97336647  0.48565642  0.55147016]\n",
<       " \n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       "[-1.34650067  0.31683155  0.50392724]\n",
<       " \n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       "[-0.40528444  0.47211416 -0.28342334]\n",
<       " \n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       "[-0.77841863  0.3032893  -0.33096625]\n",
<       " \n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       "[-1.15155283  0.13446443 -0.37850917]\n",
<       " \n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       "[-0.55132419  0.7092791   0.02057745]\n",
<       " \n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       "[-0.92445838  0.54045423 -0.02696547]\n",
<       " \n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       "[-1.29759257  0.37162937 -0.07450839]\n",
<       " \n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       "[-0.69736393  0.94644403  0.32457823]\n",
<       " \n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       "[-1.07049812  0.77761917  0.27703531]\n",
<       " \n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       "[-1.44363232  0.6087943   0.2294924 ]\n",
<       " \n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       "[-0.50241609  0.76407691 -0.55785818]\n",
<       " \n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       "[-0.87555028  0.59525205 -0.6054011 ]\n",
<       " \n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       "[-1.24868447  0.42642718 -0.65294402]\n",
<       " \n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       "[-0.64845583  1.00124185 -0.2538574 ]\n",
<       " \n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       "[-1.02159003  0.83241698 -0.30140032]\n",
<       " \n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       "[-1.39472422  0.66359212 -0.34894323]\n",
<       " \n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       "[-0.79449558  1.23840679  0.05014338]\n",
<       " \n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       "[-1.16762977  1.06958192  0.00260046]\n",
<       " \n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       "[-1.54076396  0.90075706 -0.04494245]\n",
<       " \n",
<       "OG & second undo all\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.      0.      0.4123]\n",
<       "[  1.38777878e-16  -7.35522754e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.      0.8246]\n",
<       "[  2.77555756e-16  -1.47104551e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.    ]\n",
<       "[ -3.57353036e-16   4.12300000e-01   7.20951077e-15]\n",
<       " \n",
<       "[ 0.      0.4123  0.4123]\n",
<       "[ -1.66533454e-16   4.12300000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.4123  0.8246]\n",
<       "[ -1.11022302e-16   4.12300000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.    ]\n",
<       "[ -7.14706072e-16   8.24600000e-01   1.44190215e-14]\n",
<       " \n",
<       "[ 0.      0.8246  0.4123]\n",
<       "[ -3.88578059e-16   8.24600000e-01   4.12300000e-01]\n",
<       " \n",
<       "[ 0.      0.8246  0.8246]\n",
<       "[ -3.33066907e-16   8.24600000e-01   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.    ]\n",
<       "[  4.12300000e-01   4.85722573e-16  -4.16333634e-16]\n",
<       " \n",
<       "[ 0.4123  0.      0.4123]\n",
<       "[  4.12300000e-01  -7.00307867e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.4123  0.      0.8246]\n",
<       "[  4.12300000e-01  -1.44606549e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.    ]\n",
<       "[  4.12300000e-01   4.12300000e-01   6.85562718e-15]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       "[ 0.4123  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.    ]\n",
<       "[  4.12300000e-01   8.24600000e-01   1.40859546e-14]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       "[ 0.4123  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       "[ 0.4123  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.      0.    ]\n",
<       "[  8.24600000e-01   9.71445147e-16  -8.32667268e-16]\n",
<       " \n",
<       "[ 0.8246  0.      0.4123]\n",
<       "[  8.24600000e-01  -6.72552292e-15   4.12300000e-01]\n",
<       " \n",
<       "[ 0.8246  0.      0.8246]\n",
<       "[  8.24600000e-01  -1.40061573e-14   8.24600000e-01]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.    ]\n",
<       "[  8.24600000e-01   4.12300000e-01   6.38378239e-15]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       "[ 0.8246  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       "[ 0.8246  0.4123  0.8246]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.    ]\n",
<       "[  8.24600000e-01   8.24600000e-01   1.37112544e-14]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       "[ 0.8246  0.8246  0.4123]\n",
<       " \n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       "[ 0.8246  0.8246  0.8246]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       "[ 0.20615  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       "[ 0.20615  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       "[ 0.20615  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       "[ 0.20615  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       "[ 0.20615  1.03075  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       "[ 0.61845  0.20615  1.03075]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       "[ 0.61845  0.61845  1.03075]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       "[ 0.61845  1.03075  0.20615]\n",
<       " \n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       "[ 0.61845  1.03075  0.61845]\n",
<       " \n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       "[ 0.61845  1.03075  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       "[ 1.03075  0.20615  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       "[ 1.03075  0.20615  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       "[ 1.03075  0.20615  1.03075]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       "[ 1.03075  0.61845  0.20615]\n",
<       " \n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       "[ 1.03075  0.61845  0.61845]\n",
<       " \n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       "[ 1.03075  0.61845  1.03075]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       "[ 1.03075  1.03075  0.20615]\n",
<       " \n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       "[ 1.03075  1.03075  0.61845]\n",
<       " \n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       "[ 1.03075  1.03075  1.03075]\n",
<       " \n",
<       "rot1 & second redo 1\n",
<       "<Rb pos=( 0.0000, 0.0000, 0.0000), 0 bonds, id: 140715302809840>\n",
<       "<Rb pos=( 0.0000, 0.0000, 0.0000), 0 bonds, id: 140715297972520>\n",
<       " \n",
<       "<N pos=( 0.2072,-0.2834, 0.2162), 0 bonds, id: 140715302810512>\n",
<       "<N pos=( 0.2072,-0.2834, 0.2162), 0 bonds, id: 140715297974816>\n",
<       " \n",
<       "<Cs pos=( 0.4144,-0.5668, 0.4324), 0 bonds, id: 140715302811800>\n",
<       "<Cs pos=( 0.4144,-0.5668, 0.4324), 0 bonds, id: 140715297975264>\n",
<       " \n",
<       "<Cs pos=( 0.2562, 0.2923, 0.1377), 0 bonds, id: 140715302811408>\n",
<       "<Cs pos=( 0.2562, 0.2923, 0.1377), 0 bonds, id: 140715297974704>\n",
<       " \n",
<       "<Cs pos=( 0.4634, 0.0088, 0.3538), 0 bonds, id: 140715302810904>\n",
<       "<Cs pos=( 0.4634, 0.0088, 0.3538), 0 bonds, id: 140715297791784>\n",
<       " \n",
<       "<Cs pos=( 0.6706,-0.2746, 0.5700), 0 bonds, id: 140715302811744>\n",
<       "<Cs pos=( 0.6706,-0.2746, 0.5700), 0 bonds, id: 140715297789880>\n",
<       " \n",
<       "<Cs pos=( 0.5123, 0.5845, 0.2753), 0 bonds, id: 140715302812920>\n",
<       "<Cs pos=( 0.5123, 0.5845, 0.2753), 0 bonds, id: 140715297791616>\n",
<       " \n",
<       "<Cs pos=( 0.7195, 0.3011, 0.4915), 0 bonds, id: 140715302812248>\n",
<       "<Cs pos=( 0.7195, 0.3011, 0.4915), 0 bonds, id: 140715297789824>\n",
<       " \n",
<       "<Cs pos=( 0.9267, 0.0177, 0.7077), 0 bonds, id: 140715302811072>\n",
<       "<Cs pos=( 0.9267, 0.0177, 0.7077), 0 bonds, id: 140715297790160>\n",
<       " \n",
<       "<Cs pos=( 0.2479,-0.0651,-0.3230), 0 bonds, id: 140715302812976>\n",
<       "<Cs pos=( 0.2479,-0.0651,-0.3230), 0 bonds, id: 140715297791728>\n",
<       " \n",
<       "<Cs pos=( 0.4551,-0.3486,-0.1068), 0 bonds, id: 140715302813144>\n",
<       "<Cs pos=( 0.4551,-0.3486,-0.1068), 0 bonds, id: 140715297788536>\n",
<       " \n",
<       "<Cs pos=( 0.6623,-0.6320, 0.1094), 0 bonds, id: 140715302809952>\n",
<       "<Cs pos=( 0.6623,-0.6320, 0.1094), 0 bonds, id: 140715297788368>\n",
<       " \n",
<       "<Cs pos=( 0.5040, 0.2271,-0.1853), 0 bonds, id: 140715302810400>\n",
<       "<Cs pos=( 0.5040, 0.2271,-0.1853), 0 bonds, id: 140715297791448>\n",
<       " \n"
<      ]
<     },
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "<Cs pos=( 0.7112,-0.0563, 0.0309), 0 bonds, id: 140715302810120>\n",
<       "<Cs pos=( 0.7112,-0.0563, 0.0309), 0 bonds, id: 140715297790720>\n",
<       " \n",
<       "<Cs pos=( 0.9184,-0.3397, 0.2471), 0 bonds, id: 140715302811912>\n",
<       "<Cs pos=( 0.9184,-0.3397, 0.2471), 0 bonds, id: 140715297789600>\n",
<       " \n",
<       "<Cs pos=( 0.7602, 0.5194,-0.0477), 0 bonds, id: 140715302812696>\n",
<       "<Cs pos=( 0.7602, 0.5194,-0.0477), 0 bonds, id: 140715297790888>\n",
<       " \n",
<       "<Cs pos=( 0.9674, 0.2360, 0.1685), 0 bonds, id: 140715302812640>\n",
<       "<Cs pos=( 0.9674, 0.2360, 0.1685), 0 bonds, id: 140715297789152>\n",
<       " \n",
<       "<Cs pos=( 1.1746,-0.0474, 0.3847), 0 bonds, id: 140715302810680>\n",
<       "<Cs pos=( 1.1746,-0.0474, 0.3847), 0 bonds, id: 140715297789656>\n",
<       " \n",
<       "<Cs pos=( 0.4957,-0.1303,-0.6459), 0 bonds, id: 140715302811016>\n",
<       "<Cs pos=( 0.4957,-0.1303,-0.6459), 0 bonds, id: 140715297788480>\n",
<       " \n",
<       "<Cs pos=( 0.7029,-0.4137,-0.4297), 0 bonds, id: 140715302812080>\n",
<       "<Cs pos=( 0.7029,-0.4137,-0.4297), 0 bonds, id: 140715297788704>\n",
<       " \n",
<       "<Cs pos=( 0.9101,-0.6971,-0.2136), 0 bonds, id: 140715302811240>\n",
<       "<Cs pos=( 0.9101,-0.6971,-0.2136), 0 bonds, id: 140715297789992>\n",
<       " \n",
<       "<Cs pos=( 0.7519, 0.1620,-0.5083), 0 bonds, id: 140715302812864>\n",
<       "<Cs pos=( 0.7519, 0.1620,-0.5083), 0 bonds, id: 140715297790328>\n",
<       " \n",
<       "<Cs pos=( 0.9591,-0.1214,-0.2921), 0 bonds, id: 140715302812360>\n",
<       "<Cs pos=( 0.9591,-0.1214,-0.2921), 0 bonds, id: 140715297788032>\n",
<       " \n",
<       "<Cs pos=( 1.1663,-0.4049,-0.0759), 0 bonds, id: 140715302813200>\n",
<       "<Cs pos=( 1.1663,-0.4049,-0.0759), 0 bonds, id: 140715297790104>\n",
<       " \n",
<       "<Cs pos=( 1.0081, 0.4542,-0.3706), 0 bonds, id: 140715302813536>\n",
<       "<Cs pos=( 1.0081, 0.4542,-0.3706), 0 bonds, id: 140715297791056>\n",
<       " \n",
<       "<Cs pos=( 1.2153, 0.1708,-0.1544), 0 bonds, id: 140715302812192>\n",
<       "<Cs pos=( 1.2153, 0.1708,-0.1544), 0 bonds, id: 140715297791896>\n",
<       " \n",
<       "<Cs pos=( 1.4225,-0.1126, 0.0617), 0 bonds, id: 140715302810064>\n",
<       "<Cs pos=( 1.4225,-0.1126, 0.0617), 0 bonds, id: 140715297789264>\n",
<       " \n",
<       "<Cl pos=( 0.3556,-0.0281, 0.0154), 0 bonds, id: 140715302812808>\n",
<       "<Cl pos=( 0.3556,-0.0281, 0.0154), 0 bonds, id: 140715297789096>\n",
<       " \n",
<       "<Cl pos=( 0.5628,-0.3116, 0.2316), 0 bonds, id: 140715302811296>\n",
<       "<Cl pos=( 0.5628,-0.3116, 0.2316), 0 bonds, id: 140715297788928>\n",
<       " \n",
<       "<Cl pos=( 0.7700,-0.5950, 0.4478), 0 bonds, id: 140715302809784>\n",
<       "<Cl pos=( 0.7700,-0.5950, 0.4478), 0 bonds, id: 140715297790496>\n",
<       " \n",
<       "<Cl pos=( 0.6118, 0.2641, 0.1531), 0 bonds, id: 140715301928016>\n",
<       "<Cl pos=( 0.6118, 0.2641, 0.1531), 0 bonds, id: 140715297791168>\n",
<       " \n",
<       "<Cl pos=( 0.8190,-0.0193, 0.3693), 0 bonds, id: 140715301925328>\n",
<       "<Cl pos=( 0.8190,-0.0193, 0.3693), 0 bonds, id: 140715297789376>\n",
<       " \n",
<       "<Cl pos=( 1.0262,-0.3027, 0.5855), 0 bonds, id: 140715301928352>\n",
<       "<Cl pos=( 1.0262,-0.3027, 0.5855), 0 bonds, id: 140715297791672>\n",
<       " \n",
<       "<Cl pos=( 0.8680, 0.5564, 0.2907), 0 bonds, id: 140715301928408>\n",
<       "<Cl pos=( 0.8680, 0.5564, 0.2907), 0 bonds, id: 140715297788144>\n",
<       " \n",
<       "<Cl pos=( 1.0751, 0.2730, 0.5069), 0 bonds, id: 140715301927232>\n",
<       "<Cl pos=( 1.0751, 0.2730, 0.5069), 0 bonds, id: 140715297788088>\n",
<       " \n",
<       "<Cl pos=( 1.2823,-0.0105, 0.7231), 0 bonds, id: 140715301927568>\n",
<       "<Cl pos=( 1.2823,-0.0105, 0.7231), 0 bonds, id: 140715297788648>\n",
<       " \n",
<       "<Cl pos=( 0.6035,-0.0933,-0.3075), 0 bonds, id: 140715301927792>\n",
<       "<Cl pos=( 0.6035,-0.0933,-0.3075), 0 bonds, id: 140715297788984>\n",
<       " \n",
<       "<Cl pos=( 0.8107,-0.3767,-0.0913), 0 bonds, id: 140715301925552>\n",
<       "<Cl pos=( 0.8107,-0.3767,-0.0913), 0 bonds, id: 140715297791000>\n",
<       " \n",
<       "<Cl pos=( 1.0179,-0.6601, 0.1248), 0 bonds, id: 140715301928688>\n",
<       "<Cl pos=( 1.0179,-0.6601, 0.1248), 0 bonds, id: 140715303013344>\n",
<       " \n",
<       "<Cl pos=( 0.8597, 0.1990,-0.1699), 0 bonds, id: 140715301926000>\n",
<       "<Cl pos=( 0.8597, 0.1990,-0.1699), 0 bonds, id: 140715303012280>\n",
<       " \n",
<       "<Cl pos=( 1.0668,-0.0844, 0.0463), 0 bonds, id: 140715301927008>\n",
<       "<Cl pos=( 1.0668,-0.0844, 0.0463), 0 bonds, id: 140715303012000>\n",
<       " \n",
<       "<Cl pos=( 1.2740,-0.3679, 0.2625), 0 bonds, id: 140715301926672>\n",
<       "<Cl pos=( 1.2740,-0.3679, 0.2625), 0 bonds, id: 140715303013232>\n",
<       " \n",
<       "<Cl pos=( 1.1158, 0.4912,-0.0322), 0 bonds, id: 140715301928800>\n",
<       "<Cl pos=( 1.1158, 0.4912,-0.0322), 0 bonds, id: 140715303013736>\n",
<       " \n",
<       "<Cl pos=( 1.3230, 0.2078, 0.1840), 0 bonds, id: 140715301927120>\n",
<       "<Cl pos=( 1.3230, 0.2078, 0.1840), 0 bonds, id: 140715303013904>\n",
<       " \n",
<       "<Cl pos=( 1.5302,-0.0756, 0.4001), 0 bonds, id: 140715301926448>\n",
<       "<Cl pos=( 1.5302,-0.0756, 0.4001), 0 bonds, id: 140715303013400>\n",
<       " \n",
<       "<Cl pos=( 0.8514,-0.1584,-0.6305), 0 bonds, id: 140715301926560>\n",
<       "<Cl pos=( 0.8514,-0.1584,-0.6305), 0 bonds, id: 140715303014128>\n",
<       " \n",
<       "<Cl pos=( 1.0586,-0.4419,-0.4143), 0 bonds, id: 140715301925440>\n",
<       "<Cl pos=( 1.0586,-0.4419,-0.4143), 0 bonds, id: 140715303013512>\n",
<       " \n",
<       "<Cl pos=( 1.2657,-0.7253,-0.1981), 0 bonds, id: 140715301927288>\n",
<       "<Cl pos=( 1.2657,-0.7253,-0.1981), 0 bonds, id: 140715303012504>\n",
<       " \n",
<       "<Cl pos=( 1.1075, 0.1338,-0.4928), 0 bonds, id: 140715301926112>\n",
<       "<Cl pos=( 1.1075, 0.1338,-0.4928), 0 bonds, id: 140715303012840>\n",
<       " \n",
<       "<Cl pos=( 1.3147,-0.1496,-0.2767), 0 bonds, id: 140715301927680>\n",
<       "<Cl pos=( 1.3147,-0.1496,-0.2767), 0 bonds, id: 140715303013568>\n",
<       " \n",
<       "<Cl pos=( 1.5219,-0.4330,-0.0605), 0 bonds, id: 140715301927736>\n",
<       "<Cl pos=( 1.5219,-0.4330,-0.0605), 0 bonds, id: 140715303012448>\n",
<       " \n",
<       "<Cl pos=( 1.3637, 0.4261,-0.3552), 0 bonds, id: 140715301924992>\n",
<       "<Cl pos=( 1.3637, 0.4261,-0.3552), 0 bonds, id: 140715303011720>\n",
<       " \n",
<       "<Cl pos=( 1.5709, 0.1427,-0.1390), 0 bonds, id: 140715301926224>\n",
<       "<Cl pos=( 1.5709, 0.1427,-0.1390), 0 bonds, id: 140715303012336>\n",
<       " \n",
<       "<O pos=( 1.7781,-0.1407, 0.0772), 0 bonds, id: 140715301928296>\n",
<       "<O pos=( 1.7781,-0.1407, 0.0772), 0 bonds, id: 140715303012784>\n",
<       " \n",
<       "second rotate 2 & second redo all\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.22417645 -0.3454584  -0.01986712]\n",
<       "[-0.37290565 -0.03617163  0.17211704]\n"
<      ]
<     },
<     {
<      "ename": "AssertionError",
<      "evalue": "",
<      "output_type": "error",
<      "traceback": [
<       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
<       "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
<       "\u001b[0;32m<ipython-input-320-41e8fd4e1831>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    436\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 438\u001b[0;31m     \u001b[0;32massert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mallclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpart2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0matol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-13\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    439\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m \u001b[0;31m# print(\" mirror2 & redo4\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
<       "\u001b[0;31mAssertionError\u001b[0m: "
<      ]
<     }
<    ],
<    "source": [
<     "#testing redo's ability to go forward after it has been interrupted and undone \n",
<     "\n",
<     "\n",
<     "###both scenarios break it\n",
<     "\n",
<     "import mbuild as mb\n",
<     "\n",
5785,6803d993
<     "import numpy as np\n",
<     "dum = []\n",
<     "for part in cscl_crystal:\n",
<     "    if np.array_equal([0,0,0], part.pos):\n",
<     "#         print(part.pos)\n",
<     "#         print(type(cscl_crystal))\n",
<     "#         print(part.name)\n",
<     "        part.name='Rb'\n",
<     "\n",
<     "    if np.sum([1.0308,1.0308,1])<= np.sum(part.pos):\n",
<     "#         print(part.pos)\n",
<     "#         print(type(cscl_crystal))\n",
<     "#         print(part.name)\n",
<     "        part.name='O'\n",
<     "\n",
<     "    if part.pos[0] == 0 and part.pos[1] == 0 and .1<= part.pos[2]<=.5:\n",
<     "#         print(part.pos)\n",
<     "#         print(type(cscl_crystal))\n",
<     "#         print(part.name)\n",
<     "        part.name='N'\n",
<     "#cscl_crystal.save('cscl_crystal_OG_labeled_3x3x3.mol2', overwrite = True)\n",
<     "OG_crystal = mb.compound.clone(cscl_crystal) \n",
<     "print('OG')\n",
<     "print('past')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('rot1')\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[-2,1,1], [1,1,1], [0,1,-1]],\n",
<     "#                             miller_directions= True)\n",
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "                            new_view= [.567, .9, -.257],\n",
<     "                            by_angles= True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[1,1,1],60],\n",
<     "#                             degrees= True)\n",
<     "#cscl_crystal.save('cscl_crystal_rot1_miller_neg211_111_01neg1.mol2', overwrite = True)\n",
<     "rotate1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('det')\n",
<     "print(np.linalg.det(cscl_lattice.lattice_vectors))\n",
<     "print('past')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('mirror1')\n",
<     "cscl_lattice.mirror(cmpnd= cscl_crystal, about= 'yx')\n",
<     "#cscl_crystal.save('cscl_crystal_mirror1_xy.mol2', overwrite = True)\n",
<     "mirror1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "print('rot2')\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[-2,1,1], -20], degrees= True)\n",
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "                            new_view= [[-2,1,1], [1,1,1], [0,1,-1]],\n",
<     "                            miller_directions= True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[1,1,1],60],\n",
<     "#                             degrees= True)\n",
<     "#cscl_crystal.save('cscl_crystal_rot2_AA_neg211_neg20.mol2', overwrite = True)\n",
<     "rotate2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "print('mirror2')\n",
<     "cscl_lattice.mirror(cmpnd= cscl_crystal, about= 'yz')\n",
<     "#cscl_crystal.save('cscl_crystal_mirror2_yz.mol2', overwrite = True)\n",
<     "mirror2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "print('rot3')\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [30,30,40],\n",
<     "#                             degrees = True, by_angles = True)\n",
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "                            new_view= [[-3,-3,-4],-15],\n",
<     "                            degrees = True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "#                             new_view= [[1,1,1],60],\n",
<     "#                             degrees= True)\n",
<     "#cscl_crystal.save('cscl_crystal_rot3_byangles_303040.mol2', overwrite = True)\n",
<     "rotate3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "\n",
<     "\n",
<     "print('undo1')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_undo1.mol2', overwrite = True)\n",
<     "undo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo lattice Vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('undo2')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_undo2.mol2', overwrite = True)\n",
<     "undo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo lattice Vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('undo3')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_undo3.mol2', overwrite = True)\n",
<     "undo3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo lattice Vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('undo4')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_undo4.mol2', overwrite = True)\n",
<     "undo4_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('undo5')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_undo5.mol2', overwrite = True)\n",
<     "undo5_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "print('redo lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "print('redo1')\n",
<     "cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_redo1.mol2', overwrite = True)\n",
<     "redo1_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "print('lat vecs')\n",
<     "print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "print('redo2')\n",
<     "cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_redo2.mol2', overwrite = True)\n",
<     "redo2_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('redo3')\n",
<     "cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_redo3.mol2', overwrite = True)\n",
<     "redo3_crystal = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('second rotate 1')\n",
<     "#cscl_lattice.rotate_lattice(lat= cscl_crystal, by_angles= True, new_view= [90,90,90], degrees= True)\n",
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "                            new_view= [[1,1,1], 30],\n",
<     "                            degrees= True)\n",
<     "#cscl_crystal.save('cscl_crystal_second_rotate1.mol2', overwrite = True)\n",
<     "second_rotation1 = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('second rotate 2')\n",
<     "#cscl_lattice.rotate_lattice(lat= cscl_crystal, by_angles= True, new_view= [30,30,60], degrees= True)\n",
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal,\n",
<     "                            new_view= [[1,1,1],30],\n",
<     "                            degrees= True)\n",
<     "#cscl_crystal.save('cscl_crystal_second_rotate2.mol2', overwrite = True)\n",
<     "second_rotation2 = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "print('second undo all')\n",
<     "cscl_lattice.undo_rotation(cmpnd= cscl_crystal, OG= True)\n",
<     "#cscl_crystal.save('cscl_crystal_second_undoall.mol2', overwrite = True)\n",
<     "second_undoall = mb.compound.clone(cscl_crystal)\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "print('lat vecs')\n",
<     "print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "# print('second undo 1')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_second_undo1.mol2', overwrite = True)\n",
<     "# second_undo1 = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('lat vecs')\n",
<     "# print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "# print('second undo 2')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_second_undo2.mol2', overwrite = True)\n",
<     "# second_undo2 = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('lat vecs')\n",
<     "# print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "# print('second undo 3')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_second_undo3.mol2', overwrite = True)\n",
<     "# second_undo3 = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('lat vecs')\n",
<     "# print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "# print('second undo 4')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_second_undo4.mol2', overwrite = True)\n",
<     "# second_undo4 = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('lat vecs')\n",
<     "# print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "# print('second undo 5')\n",
<     "# cscl_lattice.undo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_second_undo5.mol2', overwrite = True)\n",
<     "# second_undo5 = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('redo_lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('lat vecs')\n",
<     "# print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "print('second redo1')\n",
<     "cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "#cscl_crystal.save('cscl_crystal_second_redo1.mol2', overwrite = True)\n",
<     "second_redo1 = mb.compound.clone(cscl_crystal)\n",
<     "print('det')\n",
<     "print(np.linalg.det(cscl_lattice.lattice_vectors))\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "print('lat vecs')\n",
<     "print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "print('second redo all')\n",
<     "cscl_lattice.redo_rotation(cmpnd= cscl_crystal, redo_all= True)\n",
<     "#cscl_crystal.save('cscl_crystal_second_redoall.mol2', overwrite = True)\n",
<     "second_redoall = mb.compound.clone(cscl_crystal)\n",
<     "print('det')\n",
<     "print(np.linalg.det(cscl_lattice.lattice_vectors))\n",
<     "print('past lattice Vecs')\n",
<     "print(cscl_lattice.past_lat_vecs)\n",
<     "print('redo_lat vecs')\n",
<     "print(cscl_lattice.redo_lat_vecs)\n",
<     "print('been_mirrored')\n",
<     "print(cscl_lattice.been_mirrored)\n",
<     "print('lat vecs')\n",
<     "print(cscl_lattice.lattice_vectors)\n",
<     "\n",
<     "\n",
<     "# print('redo4')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo4.mol2', overwrite = True)\n",
<     "# redo4_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "\n",
<     "# print('redo5')\n",
<     "# cscl_lattice.redo_rotation(cmpnd= cscl_crystal)\n",
<     "# #cscl_crystal.save('cscl_crystal_redo5.mol2', overwrite = True)\n",
<     "# redo5_crystal = mb.compound.clone(cscl_crystal)\n",
<     "# print('past lattice Vecs')\n",
<     "# print(cscl_lattice.past_lat_vecs)\n",
<     "# print('been_mirrored')\n",
<     "# print(cscl_lattice.been_mirrored)\n",
<     "# print('redo lat vecs')\n",
<     "# print(cscl_lattice.redo_lat_vecs)\n",
<     "\n",
<     "\n",
<     "print('OG & undo5')\n",
<     "for part1, part2 in zip(OG_crystal, undo5_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print(\" rot1 & undo4\")\n",
<     "for part1, part2 in zip(rotate1_crystal, undo4_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print(\" mirror 1 & undo 3\")\n",
<     "for part1, part2 in zip(undo3_crystal, mirror1_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print('rotate2 & undo 2')\n",
<     "for part1, part2 in zip(undo2_crystal, rotate2_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print(\" mirror2 & undo1\")\n",
<     "for part1, part2 in zip(mirror2_crystal, undo1_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "    \n",
<     "# print('rot3 & redo5')\n",
<     "# for part1, part2 in zip(rotate3_crystal, redo5_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "print(\" rot1 & redo1\")\n",
<     "for part1, part2 in zip(rotate1_crystal, redo1_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print(\" mirror 1 & redo2\")\n",
<     "for part1, part2 in zip(redo2_crystal, mirror1_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print('rotate2 & redo3')\n",
<     "for part1, part2 in zip(undo2_crystal, rotate2_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "\n",
<     "    \n",
<     "print('OG & second undo all')\n",
<     "for part1, part2 in zip(OG_crystal, second_undoall):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "\n",
<     "# print('OG & second undo 5')\n",
<     "# for part1, part2 in zip(OG_crystal, second_undo5):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "\n",
<     "    \n",
<     "print('rot1 & second redo 1')\n",
<     "for part1, part2 in zip(redo1_crystal, second_redo1):\n",
<     "    print(part1)\n",
<     "    print(part2)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "print('second rotate 2 & second redo all')\n",
<     "for part1, part2 in zip(second_rotation2, second_redoall):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "    print(' ')\n",
<     "# print(\" mirror2 & redo4\")\n",
<     "# for part1, part2 in zip(mirror2_crystal, redo4_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "\n",
<     "# print('rot3 & redoall')\n",
<     "# for part1, part2 in zip(rotate3_crystal, redoall_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-13))\n",
<     "#     print(' ')\n",
<     "\n"
<    ]
<   },
<   {
<    "cell_type": "code",
<    "execution_count": 284,
<    "metadata": {},
<    "outputs": [
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       "nan\n",
<       "[-0.22417645 -0.3454584  -0.01986712]\n",
<       "[-0.03217477  0.3118015   0.26783558]\n",
<       "128.500292252\n",
<       "[-0.4483529  -0.6909168  -0.03973425]\n",
<       "[-0.06434955  0.62360301  0.53567115]\n",
<       "128.500292252\n",
<       "[ 0.02625238 -0.04058347  0.40945706]\n",
<       "[ 0.40526276  0.06895801 -0.03159392]\n",
<       "91.7178014677\n",
<       "[-0.19792407 -0.38604187  0.38958994]\n",
<       "[ 0.37308799  0.38075952  0.23624166]\n",
<       "112.26108943\n",
<       "[-0.42210052 -0.73150027  0.36972281]\n",
<       "[ 0.34091322  0.69256102  0.50407724]\n",
<       "123.098107332\n",
<       "[ 0.05250476 -0.08116693  0.81891412]\n",
<       "[ 0.81052553  0.13791602 -0.06318783]\n",
<       "91.7178014677\n",
<       "[-0.17167169 -0.42662533  0.799047  ]\n",
<       "[ 0.77835075  0.44971753  0.20464775]\n",
<       "100.984836089\n",
<       "[-0.39584814 -0.77208373  0.77917988]\n",
<       "[ 0.74617598  0.76151903  0.47248332]\n",
<       "112.26108943\n",
<       "[-0.34503191  0.22136568  0.04406249]\n",
<       "[ 0.06868891 -0.26079859  0.3118609 ]\n",
<       "113.465636741\n",
<       "[-0.56920836 -0.12409272  0.02419536]\n",
<       "[ 0.03651414  0.05100291  0.57969647]\n",
<       "92.2060870118\n",
<       "[-0.79338482 -0.46955112  0.00432824]\n",
<       "[ 0.00433937  0.36280442  0.84753205]\n",
<       "101.54648098\n",
<       "[-0.31877953  0.18078222  0.45351955]\n",
<       "[ 0.47395168 -0.19184058  0.28026698]\n",
<       "99.9355862545\n",
<       "[-0.54295598 -0.16467618  0.43365242]\n",
<       "[ 0.4417769   0.11996093  0.54810256]\n",
<       "92.4650680123\n",
<       "[-0.76713244 -0.51013458  0.4137853 ]\n",
<       "[ 0.40960213  0.43176243  0.81593813]\n",
<       "101.128079339\n",
<       "[-0.29252715  0.14019875  0.86297661]\n",
<       "[ 0.87921444 -0.12288256  0.24867307]\n",
<       "94.0360233818\n",
<       "[-0.5167036  -0.20525965  0.84310948]\n",
<       "[ 0.84703967  0.18891894  0.51650864]\n",
<       "92.3022611428\n",
<       "[-0.74088006 -0.55071805  0.82324236]\n",
<       "[ 0.81486489  0.50072044  0.78434422]\n",
<       "98.7890561607\n",
<       "[-0.69006383  0.44273137  0.08812497]\n",
<       "[ 0.13737783 -0.52159718  0.62372179]\n",
<       "113.465636741\n",
<       "[-0.91424028  0.09727297  0.06825785]\n",
<       "[ 0.10520306 -0.20979568  0.89155737]\n",
<       "93.7596415564\n",
<       "[-1.13841673 -0.24818543  0.04839072]\n",
<       "[ 0.07302828  0.10200583  1.15939295]\n",
<       "92.2060870118\n",
<       "[-0.66381145  0.4021479   0.49758203]\n",
<       "[ 0.54264059 -0.45263917  0.59212788]\n",
<       "106.936817438\n",
<       "[-0.8879879   0.0566895   0.47771491]\n",
<       "[ 0.51046582 -0.14083766  0.85996345]\n",
<       "92.8354282767\n",
<       "[-1.11216435 -0.2887689   0.45784778]\n",
<       "[ 0.47829105  0.17096384  1.12779903]\n",
<       "92.4330054942\n",
<       "[-0.63755907  0.36156444  0.90703909]\n",
<       "[ 0.94790335 -0.38368115  0.56053396]\n",
<       "99.9355862545\n",
<       "[-0.86173552  0.01610604  0.88717197]\n",
<       "[ 0.91572858 -0.07187965  0.82836954]\n",
<       "92.0739662757\n",
<       "[-1.08591197 -0.32935236  0.86730485]\n",
<       "[ 0.88355381  0.23992185  1.09620511]\n",
<       "92.4650680123\n",
<       "[-0.27147799 -0.08233809  0.21682621]\n",
<       "[ 0.22088845  0.05998046  0.27405128]\n",
<       "92.4650680123\n",
<       "[-0.49565444 -0.42779649  0.19695909]\n",
<       "[ 0.18871368  0.37178197  0.54188685]\n",
<       "108.180023994\n",
<       "[-0.7198309  -0.77325489  0.17709196]\n",
<       "[ 0.15653891  0.68358347  0.80972243]\n",
<       "115.715083011\n",
<       "[-0.24522561 -0.12292156  0.62628327]\n",
<       "[ 0.62615121  0.12893848  0.24245736]\n",
<       "92.1515843144\n",
<       "[-0.46940206 -0.46837996  0.60641615]\n",
<       "[ 0.59397644  0.44073998  0.51029294]\n",
<       "102.574990639\n",
<       "[-0.69357852 -0.81383836  0.58654903]\n",
<       "[ 0.56180167  0.75254148  0.77812852]\n",
<       "111.522669888\n",
<       "[-0.21897323 -0.16350502  1.03574033]\n",
<       "[ 1.03141398  0.19789649  0.21086345]\n",
<       "91.9882197725\n",
<       "[-0.44314968 -0.50896342  1.01587321]\n",
<       "[ 0.9992392   0.50969799  0.47869902]\n",
<       "98.347253967\n",
<       "[-0.66732614 -0.85442182  0.99600609]\n",
<       "[ 0.96706443  0.8214995   0.7465346 ]\n",
<       "106.173002559\n",
<       "[-0.61650991  0.13902759  0.2608887 ]\n",
<       "[ 0.28957737 -0.20081813  0.58591217]\n",
<       "96.5825229493\n",
<       "[-0.84068636 -0.20643081  0.24102157]\n",
<       "[ 0.25740259  0.11098338  0.85374775]\n",
<       "92.3801678728\n",
<       "[-1.06486281 -0.55188921  0.22115445]\n",
<       "[ 0.22522782  0.42278488  1.12158333]\n",
<       "98.7052629817\n",
<       "[-0.59025753  0.09844413  0.67034576]\n",
<       "[ 0.69484013 -0.13186011  0.55431826]\n",
<       "93.6590015007\n",
<       "[-0.81443398 -0.24701427  0.65047863]\n",
<       "[ 0.66266536  0.17994139  0.82215384]\n",
<       "92.4650680123\n",
<       "[-1.03861043 -0.59247267  0.63061151]\n",
<       "[ 0.63049058  0.49174289  1.08998941]\n",
<       "98.142269783\n",
<       "[-0.56400515  0.05786066  1.07980282]\n",
<       "[ 1.10010289 -0.0629021   0.52272434]\n",
<       "92.2988838183\n",
<       "[-0.7881816  -0.28759774  1.0599357 ]\n",
<       "[ 1.06792812  0.2488994   0.79055992]\n",
<       "92.3635256091\n",
<       "[-1.01235805 -0.63305614  1.04006857]\n",
<       "[ 1.03575335  0.56070091  1.0583955 ]\n",
<       "96.9339938145\n",
<       "[-0.96154182  0.36039328  0.30495118]\n",
<       "[ 0.35826628 -0.46161672  0.89777307]\n",
<       "101.923854324\n",
<       "[-1.18571827  0.01493488  0.28508406]\n",
<       "[ 0.32609151 -0.14981521  1.16560865]\n",
<       "92.1805233277\n",
<       "[-1.40989472 -0.33052352  0.26521693]\n",
<       "[ 0.29391673  0.16198629  1.43344422]\n",
<       "92.3205582128\n",
<       "[-0.93528944  0.31980981  0.71440824]\n",
<       "[ 0.76352904 -0.3926587   0.86617916]\n",
<       "98.5403519978\n",
<       "[-1.15946589 -0.02564859  0.69454112]\n",
<       "[ 0.73135427 -0.0808572   1.13401473]\n",
<       "91.8278049936\n",
<       "[-1.38364234 -0.37110699  0.674674  ]\n",
<       "[ 0.6991795   0.2309443   1.40185031]\n",
<       "92.4532820394\n",
<       "[-0.90903706  0.27922634  1.1238653 ]\n",
<       "[ 1.16879181 -0.32370069  0.83458524]\n",
<       "95.6903007093\n",
<       "[-1.13321351 -0.06623205  1.10399818]\n",
<       "[ 1.13661703 -0.01189919  1.10242082]\n",
<       "91.6036844151\n",
<       "[-1.35738996 -0.41169045  1.08413106]\n",
<       "[ 1.10444226  0.29990232  1.37025639]\n",
<       "92.4650680123\n"
<      ]
<     },
<     {
<      "name": "stderr",
<      "output_type": "stream",
<      "text": [
<       "/home/witteaj/builds/mbuild/mbuild/coordinate_transform.py:259: RuntimeWarning: invalid value encountered in double_scalars\n",
<       "  c = np.dot(u, v) / norm(u) / norm(v)\n"
<      ]
<     }
<    ],
<    "source": [
<     "for part1, part2 in zip(second_rotation2, second_redoall):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    print(180*angle(part1.pos,part2.pos)/np.pi)\n",
<     "    \n",
<     "    \n",
<     "\n",
<     "\n"
<    ]
<   },
<   {
<    "cell_type": "code",
<    "execution_count": null,
<    "metadata": {
<     "collapsed": true
<    },
<    "outputs": [],
<    "source": [
<     "################################################"
<    ]
<   },
<   {
<    "cell_type": "code",
<    "execution_count": 181,
<    "metadata": {},
<    "outputs": [
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       "OG\n",
<       "[[ 1.  0.  0.]\n",
<       " [ 0.  1.  0.]\n",
<       " [ 0.  0.  1.]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "past lat vecs\n",
<       "deque([])\n",
<       "redo lat vecs\n",
<       " \n",
<       "after first rot\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]])])\n",
<       "past lat vecs\n",
<       "deque([])\n",
<       "redo lat vecs\n",
<       " \n",
<       "after second rotate\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]]), array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]])])\n",
<       "past lat vecs\n",
<       "deque([])\n",
<       "redo lat vecs\n",
<       " \n",
<       "__________________________\n",
<       "pre rotation\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "0\n",
<       "post rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [-0.69619582 -0.66841963  0.26177582]\n",
<       " [-0.53223063  0.72533495  0.43660023]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [-0.69619582 -0.66841963  0.26177582]\n",
<       " [-0.53223063  0.72533495  0.43660023]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "1\n",
<       "post rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "after first undo\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]])])\n",
<       "past lat vecs\n",
<       "deque([array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]])])\n",
<       "redo lat vecs\n",
<       "__________________________\n",
<       "pre rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "\n",
<       "0\n",
<       "post rotation\n",
<       "[[  1.00000000e+00  -5.55111512e-17   9.02056208e-17]\n",
<       " [ -2.77555756e-17   9.29411765e-01   3.69044403e-01]\n",
<       " [ -5.20417043e-17  -3.69044403e-01   9.29411765e-01]]\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "\n",
<       "post normalization\n",
<       "[[  1.00000000e+00  -5.55111512e-17   9.02056208e-17]\n",
<       " [ -2.77555756e-17   9.29411765e-01   3.69044403e-01]\n",
<       " [ -5.20417043e-17  -3.69044403e-01   9.29411765e-01]]\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "\n",
<       "1\n",
<       "post rotation\n",
<       "[[  1.00000000e+00  -4.60584132e-17   1.09633137e-16]\n",
<       " [ -3.08148791e-33   1.00000000e+00   5.55111512e-17]\n",
<       " [ -5.73505969e-17   1.11022302e-16   1.00000000e+00]]\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "\n",
<       "post normalization\n",
<       "[[  1.00000000e+00  -4.60584132e-17   1.09633137e-16]\n",
<       " [ -3.08148791e-33   1.00000000e+00   5.55111512e-17]\n",
<       " [ -5.73505969e-17   1.11022302e-16   1.00000000e+00]]\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "\n",
<       "after 2nd undo\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "past lat vecs\n",
<       "deque([array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]]), array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]])])\n",
<       "redo lat vecs\n",
<       "pre rotation\n",
<       "[[1 0 0]\n",
<       " [0 1 0]\n",
<       " [0 0 1]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "orthag\n",
<       "[-0.          0.86072856  0.16463415]\n",
<       "0.876332163439\n",
<       "2.07339825168\n",
<       "0\n",
<       "post rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [-0.16463415  0.94770445  0.2734079 ]\n",
<       " [ 0.86072856  0.2734079  -0.42941176]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [-0.16463415  0.94770445  0.2734079 ]\n",
<       " [ 0.86072856  0.2734079  -0.42941176]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "pre rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [-0.16463415  0.94770445  0.2734079 ]\n",
<       " [ 0.86072856  0.2734079  -0.42941176]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "orthag\n",
<       "[-0.17777139  0.06075731 -0.31764706]\n",
<       "0.369044403326\n",
<       "0.377980636911\n",
<       "1\n",
<       "post rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "post normalization\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "\n",
<       "after first redo\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]])])\n",
<       "past lat vecs\n",
<       "deque([array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]])])\n",
<       "redo lat vecs\n",
<       "pre rotation\n",
<       "[[-0.48170732  0.16463415 -0.86072856]\n",
<       " [ 0.16463415  0.98170732  0.09563651]\n",
<       " [ 0.86072856 -0.09563651 -0.5       ]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "orthag\n",
<       "[-0.4659325   0.25532361  0.30959595]\n",
<       "0.614925111333\n",
<       "2.47930165642\n",
<       "0\n",
<       "post rotation\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [-0.85794989 -0.43280019 -0.27677784]\n",
<       " [ 0.50200793 -0.59184318 -0.63064228]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [-0.85794989 -0.43280019 -0.27677784]\n",
<       " [ 0.50200793 -0.59184318 -0.63064228]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "\n",
<       "pre rotation\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [-0.85794989 -0.43280019 -0.27677784]\n",
<       " [ 0.50200793 -0.59184318 -0.63064228]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "orthag\n",
<       "[-0.07270422  0.45301755 -0.48302097]\n",
<       "0.666198215298\n",
<       "2.41249331432\n",
<       "1\n",
<       "post rotation\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "\n",
<       "post normalization\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "\n",
<       "after second redo\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]]), array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]])])\n",
<       "past lat vecs\n",
<       "deque([])\n",
<       "redo lat vecs\n",
<       "after undo all\n",
<       "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]]])\n",
<       "past lat vecs\n",
<       "deque([array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]]), array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]])])\n",
<       "redo lat vecs\n",
<       "after redo all\n",
<       "[[ 0.10913302 -0.68000415  0.72504092]\n",
<       " [ 0.30540056  0.71705632  0.62654668]\n",
<       " [-0.94594951  0.15305097  0.28592817]]\n",
<       "lattice vecs\n",
<       "deque([[[1, 0, 0], [0, 1, 0], [0, 0, 1]], array([[-0.48170732,  0.16463415, -0.86072856],\n",
<       "       [ 0.16463415,  0.98170732,  0.09563651],\n",
<       "       [ 0.86072856, -0.09563651, -0.5       ]]), array([[ 0.10913302, -0.68000415,  0.72504092],\n",
<       "       [ 0.30540056,  0.71705632,  0.62654668],\n",
<       "       [-0.94594951,  0.15305097,  0.28592817]])])\n",
<       "past lat vecs\n",
<       "deque([])\n",
<       "redo lat vecs\n",
<       "Matches:\n",
<       "OG, undo all, undo 2\n",
<       "redo all, rotation 2, redo 2 \n",
<       "rotation 1, redo 1, undo 1\n"
<      ]
<     },
<     {
<      "name": "stderr",
<      "output_type": "stream",
<      "text": [
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n",
<       "/home/witteaj/builds/mbuild/mbuild/utils/decorators.py:11: DeprecationWarning: translate is deprecated. Please use Compound.translate()\n",
<       "  warn(printed_message, DeprecationWarning)\n"
<      ]
<     }
<    ],
<    "source": [
<     "import mbuild as mb\n",
<     "\n",
<     "dim = 3\n",
<     "cscl_lengths = [.4123, .4123, .4123]\n",
<     "cscl_vectors = [[1,0,0], [0,1,0], [0,0,1]]\n",
<     "cscl_basis = {'Cs':[[0, 0, 0]], 'Cl':[[.5, .5, .5]]}\n",
<     "cscl_lattice = Lattice(cscl_lengths, dimension=dim,\n",
<     "                                lattice_vectors=cscl_vectors, basis_atoms=cscl_basis)\n",
<     "cs = mb.Compound(name='Cs')\n",
<     "cl = mb.Compound(name='Cl')\n",
<     "cscl_dict = {'Cs':cs, 'Cl':cl}\n",
<     "#cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=3, y=3, z=3)\n",
<     "cscl_crystal = cscl_lattice.populate(compound_dict=cscl_dict, x=2, y=2, z=2)\n",
<     "\n",
<     "\n",
6813c1003
<     "\n",
---
>     "        \n",
6819c1009
<     "\n",
---
>     "        \n",
6841c1031
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,9,0], 120], degrees= True)\n",
---
>     "cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,1], 120], degrees= True)\n",
6858,6859c1048
<     "cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[-2,1,1], [1,1,1], [0,1,-1]], miller_directions= True)\n",
<     "# cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,2], 150], degrees= True)\n",
---
>     "cscl_lattice.rotate_lattice(lat= cscl_crystal, new_view= [[1,1,1], 120], degrees= True)\n",
6899c1088
<     "#cscl_crystal.save('cscl_crystal_undo2.mol2', overwrite = True)\n",
---
>     "# cscl_crystal.save('cscl_crystal_undo2.mol2', overwrite = True)\n",
6915c1104
<     "#cscl_crystal.save('cscl_crystal_redo1.mol2', overwrite = True)\n",
---
>     "# cscl_crystal.save('cscl_crystal_redo1.mol2', overwrite = True)\n",
6932c1121
<     "#cscl_crystal.save('cscl_crystal_redo2.mol2', overwrite = True)\n",
---
>     "# cscl_crystal.save('cscl_crystal_redo2.mol2', overwrite = True)\n",
6948c1137
<     "#cscl_crystal.save('cscl_crystal_undoall.mol2', overwrite = True)\n",
---
>     "# cscl_crystal.save('cscl_crystal_undoall.mol2', overwrite = True)\n",
6964c1153
<     "#cscl_crystal.save('cscl_crystal_redoall.mol2', overwrite = True)\n",
---
>     "# cscl_crystal.save('cscl_crystal_redoall.mol2', overwrite = True)\n",
6984c1173
<    "execution_count": 55,
---
>    "execution_count": null,
6986,7245d1174
<     "scrolled": false
<    },
<    "outputs": [
<     {
<      "name": "stdout",
<      "output_type": "stream",
<      "text": [
<       " rot2 & redoall\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       " \n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       " \n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       " \n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       " \n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       " \n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       " \n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       " \n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       " \n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       " \n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       " \n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       " \n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       " \n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       " \n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       " \n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       " \n",
<       " rot2 & redo2\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       " \n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       " \n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       " \n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       " \n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       " \n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       " \n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       " \n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       " \n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       " \n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       " \n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       " \n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       " \n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       " \n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       " \n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       " \n",
<       " redoall & redo2\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       "[-0.39001498  0.06310291  0.11788818]\n",
<       " \n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       "[ 0.12591665  0.29564232  0.2583252 ]\n",
<       " \n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       "[-0.26409834  0.35874523  0.37621338]\n",
<       " \n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       "[ 0.04499554 -0.28036571  0.29893437]\n",
<       " \n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       "[-0.34501944 -0.2172628   0.41682256]\n",
<       " \n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       "[ 0.17091219  0.01527661  0.55725957]\n",
<       " \n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       "[-0.21910279  0.07837952  0.67514775]\n",
<       " \n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       "[-0.1095514   0.03918976  0.33757388]\n",
<       " \n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       "[-0.49956638  0.10229268  0.45546206]\n",
<       " \n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       "[ 0.01636525  0.33483208  0.59589907]\n",
<       " \n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       "[-0.37364973  0.397935    0.71378726]\n",
<       " \n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       "[-0.06455585 -0.24117595  0.63650825]\n",
<       " \n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       "[-0.45457083 -0.17807303  0.75439643]\n",
<       " \n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       "[ 0.0613608   0.05446637  0.89483344]\n",
<       " \n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       "[-0.32865419  0.11756929  1.01272163]\n",
<       " \n",
<       "undoall & OG\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[  0.00000000e+00  -6.24500451e-17   4.12300000e-01]\n",
<       "[ 0.      0.      0.4123]\n",
<       " \n",
<       "[  1.11022302e-16   4.12300000e-01   1.04083409e-16]\n",
<       "[ 0.      0.4123  0.    ]\n",
<       " \n",
<       "[  5.55111512e-17   4.12300000e-01   4.12300000e-01]\n",
<       "[ 0.      0.4123  0.4123]\n",
<       " \n",
<       "[  4.12300000e-01   2.77555756e-17   0.00000000e+00]\n",
<       "[ 0.4123  0.      0.    ]\n",
<       " \n",
<       "[  4.12300000e-01   8.32667268e-17   4.12300000e-01]\n",
<       "[ 0.4123  0.      0.4123]\n",
<       " \n",
<       "[  4.12300000e-01   4.12300000e-01   1.74339709e-16]\n",
<       "[ 0.4123  0.4123  0.    ]\n",
<       " \n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       "[ 0.4123  0.4123  0.4123]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       "[ 0.20615  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       "[ 0.20615  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       "[ 0.20615  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       "[ 0.20615  0.61845  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       "[ 0.61845  0.20615  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       "[ 0.61845  0.20615  0.61845]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       "[ 0.61845  0.61845  0.20615]\n",
<       " \n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       "[ 0.61845  0.61845  0.61845]\n",
<       " \n",
<       "redo1 & undo1\n",
<       "[ 0.  0.  0.]\n",
<       "[ 0.  0.  0.]\n",
<       " \n",
<       "[ 0.24694768  0.25901225 -0.20474566]\n",
<       "[ 0.24694768  0.25901225 -0.20474566]\n",
<       " \n",
<       "[-0.32342772  0.13839324 -0.21501887]\n",
<       "[-0.32342772  0.13839324 -0.21501887]\n",
<       " \n",
<       "[-0.07648003  0.39740549 -0.41976453]\n",
<       "[-0.07648003  0.39740549 -0.41976453]\n",
<       " \n",
<       "[ 0.06635242 -0.28939809 -0.28607235]\n",
<       "[ 0.06635242 -0.28939809 -0.28607235]\n",
<       " \n",
<       "[ 0.31330011 -0.03038585 -0.49081801]\n",
<       "[ 0.31330011 -0.03038585 -0.49081801]\n",
<       " \n",
<       "[-0.25707529 -0.15100485 -0.50109122]\n",
<       "[-0.25707529 -0.15100485 -0.50109122]\n",
<       " \n",
<       "[-0.01012761  0.10800739 -0.70583688]\n",
<       "[-0.01012761  0.10800739 -0.70583688]\n",
<       " \n",
<       "[-0.0050638   0.0540037  -0.35291844]\n",
<       "[-0.0050638   0.0540037  -0.35291844]\n",
<       " \n",
<       "[ 0.24188388  0.31301594 -0.55766411]\n",
<       "[ 0.24188388  0.31301594 -0.55766411]\n",
<       " \n",
<       "[-0.32849152  0.19239694 -0.56793731]\n",
<       "[-0.32849152  0.19239694 -0.56793731]\n",
<       " \n",
<       "[-0.08154383  0.45140918 -0.77268297]\n",
<       "[-0.08154383  0.45140918 -0.77268297]\n",
<       " \n",
<       "[ 0.06128862 -0.2353944  -0.63899079]\n",
<       "[ 0.06128862 -0.2353944  -0.63899079]\n",
<       " \n",
<       "[ 0.30823631  0.02361785 -0.84373645]\n",
<       "[ 0.30823631  0.02361785 -0.84373645]\n",
<       " \n",
<       "[-0.26213909 -0.09700116 -0.85400966]\n",
<       "[-0.26213909 -0.09700116 -0.85400966]\n",
<       " \n",
<       "[-0.01519141  0.16201109 -1.05875532]\n",
<       "[-0.01519141  0.16201109 -1.05875532]\n",
<       " \n"
<      ]
<     }
<    ],
<    "source": [
<     "#testing if the redo undo's work\n",
<     "print(' rot2 & redoall')\n",
< =======
<     "collapsed": true,
7250d1178
< >>>>>>> origin/coor_changes
7255,7311d1182
< <<<<<<< HEAD
<     "    print(' ')\n",
<     "print(\" rot2 & redo2\")\n",
<     "for part1, part2 in zip(rot2_crystal, redo2_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "    print(' ')\n",
<     "print(\" redoall & redo2\")\n",
<     "for part1, part2 in zip(redoall_crystal, redo2_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "    print(' ')\n",
<     "    #### these above all seem to always work \n",
<     "\n",
<     "# print('undo2 & undoall')\n",
<     "# for part1, part2 in zip(undo2_crystal, undoall_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "#     print(' ')\n",
<     "# print('undo2 & OG')\n",
<     "# for part1, part2 in zip(undo2_crystal, OG_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "#     print(' ')\n",
<     "print('undoall & OG')\n",
<     "for part1, part2 in zip(undoall_crystal, OG_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "    print(' ')\n",
<     "    ####this one actually works every time for whatever situation\n",
<     "    \n",
<     "# print('rot1 & redo1')\n",
<     "# for part1, part2 in zip(rot1_crystal, redo1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "#     print(' ')\n",
<     "# print('rot1 & undo1')\n",
<     "# for part1, part2 in zip(rot1_crystal, undo1_crystal):\n",
<     "#     print(part1.pos)\n",
<     "#     print(part2.pos)\n",
<     "#     assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "#     print(' ')\n",
<     "print('redo1 & undo1')\n",
<     "for part1, part2 in zip(redo1_crystal, undo1_crystal):\n",
<     "    print(part1.pos)\n",
<     "    print(part2.pos)\n",
<     "    assert(np.allclose(part1.pos, part2.pos, atol=1e-15))\n",
<     "    print(' ')\n",
<     "    #### seems to always work\n",
<     "    \n"
< =======
7313d1183
< >>>>>>> origin/coor_changes
7319,7321c1189
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7351,7353c1219
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7422d1287
<     "collapsed": true,
7485d1349
<     "collapsed": true,
7549,7551c1413
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7592d1453
<     "collapsed": true,
7639,7641c1500
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7677,7679c1536
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7700,7702c1557
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7740c1595,1597
<    "source": []
---
>    "source": [
>     ""
>    ]
7746d1602
<     "collapsed": true,
7798,7800c1654
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7835c1689,1691
<    "source": []
---
>    "source": [
>     ""
>    ]
7840,7842c1696
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7878c1732,1734
<    "source": []
---
>    "source": [
>     ""
>    ]
7887c1743,1745
<    "source": []
---
>    "source": [
>     ""
>    ]
7892,7894c1750
<    "metadata": {
<     "collapsed": true
<    },
---
>    "metadata": {},
7932c1788,1790
<    "source": []
---
>    "source": [
>     ""
>    ]
7936d1793
<   "celltoolbar": "Raw Cell Format",
7945c1802
<     "version": 3
---
>     "version": 3.0
7956,7957c1813,1814
<  "nbformat_minor": 1
< }
---
>  "nbformat_minor": 0
> }
\ No newline at end of file
